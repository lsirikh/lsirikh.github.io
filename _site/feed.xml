<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-08T17:05:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">로봇 제작을 위한 지식공간</title><subtitle>This blog was designed to deliver the knowledge to people who want to make private Robots &lt;br&gt; jekyll theme을 입힌 블로그 
</subtitle><entry><title type="html">05.GIT 저장소 수정하기와 저장하기</title><link href="http://localhost:4000/2019/12/08/GIT-05-modifying-and-saving-repository" rel="alternate" type="text/html" title="05.GIT 저장소 수정하기와 저장하기" /><published>2019-12-08T11:50:13+09:00</published><updated>2019-12-08T11:50:13+09:00</updated><id>http://localhost:4000/2019/12/08/GIT-05-modifying-and-saving-repository</id><content type="html" xml:base="http://localhost:4000/2019/12/08/GIT-05-modifying-and-saving-repository">&lt;h5 id=&quot;git의-기초---수정하고-저장소에-저장하기&quot;&gt;Git의 기초 - 수정하고 저장소에 저장하기&lt;/h5&gt;

&lt;p&gt;실제 존재하는 Git 저장소를 하나 만들었고 워킹 디렉토리에 Checkout도 했다. 이제는 파일을 수정하고 파일의 스냅샷을 커밋해 보자. 파일을 수정하다가 저장하고 싶으면 스냅샷을 커밋한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Checkout은 처음 Git을 접하면 생소할 수 있다. Git은 스냅샷을 기반으로 데이터의 내용을 저장하고 추적한다. Checkout이 되어있는 디렉토리란(워킹디렉토리)는 현재 .git 폴더에서 관리하는 워킹 트리에 데이터가 업데이트 되어 워킹트리, 워킹트리의 선택 브랜치, 워킹 디렉토리 모두 최신화 되어 있는 상태를 말한다. (이렇게 설명하면 처음 접하는 사람은 더 헷갈릴 수 있을 것 같네…)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;이제부터 설명하는 내용이 Git에 매우 중요한 내용이지만, 이해하기 쉽지 않을 수 있다. 차근차근 보도록 해보자.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;워킹 디렉토리의 모든 파일은 크게 Tracked(관리대상임)와 Untracked(관리대상이 아님)로 나눈다. Tracked 파일은 이미 스냅샷에 포함돼 있던 파일이다. Tracked 파일은 또 Unmodified(수정하지 않음)와 Modified(수정함) 그리고 Staged(커밋으로 저장소에 기록할) 상태 중 하나이다. 간단히 말하자면 Git이 알고 있는 파일이라는 것이다.&lt;/p&gt;

&lt;p&gt;그리고 나머지 파일은 모두 Untracked 파일이다. Untracked 파일은 워킹 디렉토리에 있는 파일 중 스냅샷에도 Staging Area에도 포함되지 않은 파일이다. 처음 저장소를 Clone 하면 모든 파일은 Tracked이면서 Unmodified 상태이다. 파일을 Checkout 하고 나서 아무것도 수정하지 않았기 때문에 그렇다.&lt;/p&gt;

&lt;p&gt;마지막 커밋 이후 아직 아무것도 수정하지 않은 상태에서 어떤 파일을 수정하면 Git은 그 파일을 Modified 상태로 인식한다. 실제로 커밋을 하기 위해서는 이 수정한 파일을 Staged 상태로 만들고, Staged 상태의 파일을 커밋한다. 이런 라이프사이클을 계속 반복한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git-lifecycle.png&quot; title=&quot;Git 파일의 라이프 사이클&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일의-상태-확인하기&quot;&gt;파일의 상태 확인하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;파일의 상태를 확인하려면 보통 &lt;strong&gt;git status&lt;/strong&gt; 명령을 사용한다. Clone 한 후에 바로 이 명령을 실행하면 아래과 같은 메시지를 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위의 내용은 파일을 하나도 수정하지 않았다는 것을 말해준다. Tracked 파일은 하나도 수정되지 않았다는 의미다. Untracked 파일은 아직 없어서 목록에 나타나지 않는다. 그리고 현재 작업 중인 브랜치를 알려주며 서버의 같은 브랜치로부터 진행된 작업이 없는 것을 나타낸다. 기본 브랜치가 master이기 때문에 현재 브랜치 이름이 “master” 로 나온다. 브랜치 관련 내용은 차차 알아가자. Git 브랜치 에서 브랜치와 Refs에 대해 자세히 다룬다.&lt;/p&gt;

&lt;p&gt;프로젝트에 &lt;strong&gt;README&lt;/strong&gt; 파일을 만들어보자. &lt;strong&gt;README&lt;/strong&gt; 파일은 새로 만든 파일이기 때문에 &lt;strong&gt;git status&lt;/strong&gt; 를 실행하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Untracked files&lt;/code&gt;에 들어 있다:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo 'My Project' &amp;gt; README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to include in what will be committed)

    README

nothing added to commit but untracked files present (use &quot;git add&quot; to track)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;README&lt;/strong&gt; 파일은 “Untracked files” 부분에 속해 있는데 이것은 &lt;strong&gt;README&lt;/strong&gt; 파일이 Untracked 상태라는 것을 말한다. Git은 Untracked 파일을 아직 스냅샷(커밋)에 넣어지지 않은 파일이라고 본다. 파일이 Tracked 상태가 되기 전까지는 Git은 절대 그 파일을 커밋하지 않는다. 그래서 일하면서 생성하는 바이너리 파일 같은 것을 커밋하는 실수는 하지 않게 된다. &lt;strong&gt;README&lt;/strong&gt; 파일을 추가해서 직접 Tracked 상태로 만들어 보자.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일을-새로-추적하기&quot;&gt;파일을 새로 추적하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;git add&lt;/strong&gt; 명령으로 파일을 새로 추적할 수 있다. 아래 명령을 실행하면 Git은 README 파일을 추적한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;git status&lt;/strong&gt; 명령을 다시 실행하면 README 파일이 Tracked 상태이면서 커밋에 추가될 Staged 상태라는 것을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;“Changes to be committed” 에 들어 있는 파일은 Staged 상태라는 것을 의미한다. 커밋하면 git add 를 실행한 시점의 파일이 커밋되어 저장소 히스토리에 남는다. 앞에서 git init 명령을 실행한 후, git add (files) 명령을 실행했던 걸 기억할 것이다. 이 명령을 통해 디렉토리에 있는 파일을 추적하고 관리하도록 한다. git add 명령은 파일 또는 디렉토리의 경로를 아규먼트로 받는다. 디렉토리면 아래에 있는 모든 파일들까지 재귀적으로 추가한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;modified-상태의-파일을-stage-하기&quot;&gt;Modified 상태의 파일을 Stage 하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;이미 Tracked 상태인 파일을 수정하는 법을 알아보자. &lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt; 라는 파일을 수정하고 나서 &lt;strong&gt;git status&lt;/strong&gt; 명령을 다시 실행하면 결과는 아래와 같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 &lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt; 파일은 “Changes not staged for commit” 에 있다. 이것은 수정한 파일이 Tracked 상태이지만 아직 Staged 상태는 아니라는 것이다. Staged 상태로 만들려면 &lt;strong&gt;git add&lt;/strong&gt; 명령을 실행해야 한다. &lt;strong&gt;git add&lt;/strong&gt; 명령은 파일을 새로 추적할 때도 사용하고 수정한 파일을 Staged 상태로 만들 때도 사용한다. Merge 할 때 충돌난 상태의 파일을 Resolve 상태로 만들때도 사용한다. add의 의미는 프로젝트에 파일을 추가한다기 보다는 다음 커밋에 추가한다고 받아들이는게 좋다. &lt;strong&gt;git add&lt;/strong&gt; 명령을 실행하여 &lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt; 파일을 Staged 상태로 만들고 &lt;strong&gt;git status&lt;/strong&gt; 명령으로 결과를 확인해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;두 파일 모두 Staged 상태이므로 다음 커밋에 포함된다. 하지만 아직 더 수정해야 한다는 것을 알게 되어 바로 커밋하지 못하는 상황이 되었다고 생각해보자. 이 상황에서 CONTRIBUTING.md 파일을 열고 수정한다. 이제 커밋할 준비가 다 됐다고 생각할 테지만, Git은 그렇지 않다. git status 명령으로 파일의 상태를 다시 확인해보자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;사실 이 부분이 어떻게 보면 복잡하게 staged 상태를 구분하는 이유가 생기는 큰 원인일 수 있다. 직접 만들어서 비교해보면 그 차이를 쉽게 이해할 수 있을 것 같다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;[참고]본래 출처에서 사용한 에디터 도구는 vim이라는 툴이고 매우 유명한 툴이지만, 사용법이 다소 복잡하여 처음 리눅스 환경을 적응해야하는 사람들에게는 다소 어려울 수 있다. 따라서, gedit나 nano와 같은 툴을 사용하는 게 훨씬 수월 할 수 있다. gedit는 윈도우 환경에서 notepad(매모장)과 같은 에디터라고 볼 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;헉! &lt;strong&gt;CONTRIBUTING.md&lt;/strong&gt; 가 Staged 상태이면서 동시에 Unstaged 상태로 나온다. 어떻게 이런 일이 가능할까? &lt;strong&gt;git add&lt;/strong&gt; 명령을 실행하면 Git은 파일을 바로 Staged 상태로 만든다. 지금 이 시점에서 커밋을 하면 &lt;strong&gt;git commit&lt;/strong&gt; 명령을 실행하는 시점의 버전이 커밋되는 것이 아니라 마지막으로 &lt;strong&gt;git add&lt;/strong&gt; 명령을 실행했을 때의 버전이 커밋된다. 그러니까 &lt;strong&gt;git add&lt;/strong&gt; 명령을 실행한 후에 또 파일을 수정하면 &lt;strong&gt;git add&lt;/strong&gt; 명령을 다시 실행해서 최신 버전을 Staged 상태로 만들어야 한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일-상태를-짤막하게-확인하기&quot;&gt;파일 상태를 짤막하게 확인하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;git status&lt;/strong&gt; 명령으로 확인할 수 있는 내용이 좀 많아 보일 수 있다. 사실 그렇다. 좀 더 간단하게 변경 내용을 보여주는 옵션이 있다. &lt;strong&gt;git status -s&lt;/strong&gt; 또는 &lt;strong&gt;git status –short&lt;/strong&gt; 처럼 옵션을 주면 현재 변경한 상태를 짤막하게 보여준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status -s
M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;아직 추적하지 않는 새 파일 앞에는 ?? 표시가 붙는다. Staged 상태로 추가한 파일 중 새로 생성한 파일 앞에는 &lt;strong&gt;A&lt;/strong&gt; 표시가, 수정한 파일 앞에는 &lt;strong&gt;M&lt;/strong&gt; 표시가 붙는다. 위 명령의 결과에서 상태정보 컬럼에는 두 가지 정보를 보여준다. 왼쪽에는 Staging Area에서의 상태를, 오른쪽에는 Working Tree에서의 상태를 표시한다. &lt;strong&gt;README&lt;/strong&gt; 파일 같은 경우 내용을 변경했지만 아직 Staged 상태로 추가하지는 않았다. &lt;strong&gt;lib/simplegit.rb&lt;/strong&gt; 파일은 내용을 변경하고 Staged 상태로 추가까지 한 상태이다. 위 결과에서 차이점을 비교해보자. &lt;strong&gt;Rakefile&lt;/strong&gt; 은 변경하고 Staged 상태로 추가한 후 또 내용을 변경해서 Staged 이면서 Unstaged 상태인 파일이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;위의 설명을 들으면서 내용을 이해하면 사실 더 이해가 안될 수도 있다. &lt;strong&gt;Rakefile&lt;/strong&gt;만 하더라도 Staged상태이면서 Unstaged상태라는 놀라운 설명이… 다시말해, &lt;strong&gt;Rakefile&lt;/strong&gt;을 수정하고, &lt;strong&gt;add Rakefile&lt;/strong&gt;이 된 후, 또, &lt;strong&gt;Rakefile&lt;/strong&gt;을 수정했다는 얘기다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일-무시하기&quot;&gt;파일 무시하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;어떤 파일은 Git이 관리할 필요가 없다. 보통 로그 파일이나 빌드 시스템이 자동으로 생성한 파일이 그렇다. 그런 파일을 무시하려면 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일을 만들고 그 안에 무시할 파일 패턴을 적는다. 아래는 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일의 예이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat .gitignore
*.[oa]
*~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;첫번째 라인은 확장자가 “.o” 나 “.a” 인 파일을 Git이 무시하라는 것이고 둘째 라인은 &lt;strong&gt;~&lt;/strong&gt; 로 끝나는 모든 파일을 무시하라는 것이다. 보통 대부분의 텍스트 편집기에서 임시파일로 사용하는 파일 이름이기 때문이다. “.o” 와 “.a” 는 각각 빌드 시스템이 만들어내는 오브젝트와 아카이브 파일이고 &lt;strong&gt;~&lt;/strong&gt; 로 끝나는 파일은 Emacs나 VI 같은 텍스트 편집기가 임시로 만들어내는 파일이다. 또 log, tmp, pid 같은 디렉토리나, 자동으로 생성하는 문서 같은 것들도 추가할 수 있다. &lt;strong&gt;.gitignore&lt;/strong&gt; 파일은 보통 처음에 만들어 두는 것이 편리하다. 그래서 Git 저장소에 커밋하고 싶지 않은 파일을 실수로 커밋하는 일을 방지할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.gitignore 파일에 입력하는 패턴은 아래 규칙을 따른다.&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;아무것도 없는 라인이나, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;로 시작하는 라인은 무시한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;표준 Glob 패턴을 사용한다. 이는 프로젝트 전체에 적용된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;슬래시(/)로 시작하면 하위 디렉토리에 적용되지(Recursivity) 않는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;디렉토리는 슬래시(/)를 끝에 사용하는 것으로 표현한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;느낌표(!)로 시작하는 패턴의 파일은 무시하지 않는다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Glob 패턴은 &lt;strong&gt;정규표현식&lt;/strong&gt;을 단순하게 만든 것으로 생각하면 되고 보통 쉘에서 많이 사용한다. 애스터리스크(&lt;strong&gt;*&lt;/strong&gt;)는 문자가 하나도 없거나 하나 이상을 의미하고, &lt;strong&gt;[abc]&lt;/strong&gt; 는 중괄호 안에 있는 문자 중 하나를 의미한다(그러니까 이 경우에는 a, b, c). 물음표(?)는 문자 하나를 말하고, &lt;strong&gt;[0-9]&lt;/strong&gt; 처럼 중괄호 안의 캐릭터 사이에 하이픈(-)을 사용하면 그 캐릭터 사이에 있는 문자 하나를 말한다. 애스터리스크 2개를 사용하여 디렉토리 안의 디렉토리 까지 지정할 수 있다. &lt;strong&gt;a/**/z&lt;/strong&gt; 패턴은 &lt;strong&gt;a/z, a/b/z, a/b/c/z&lt;/strong&gt; 디렉토리에 사용할 수 있다.&lt;/p&gt;

&lt;p&gt;아래는 &lt;strong&gt;.gitignore&lt;/strong&gt;파일의 예이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 확장자가 .a인 파일 무시
*.a

# 윗 라인에서 확장자가 .a인 파일은 무시하게 했지만 lib.a는 무시하지 않음
!lib.a

# 현재 디렉토리에 있는 TODO파일은 무시하고 subdir/TODO처럼 하위디렉토리에 있는 파일은 무시하지 않음
/TODO

# build/ 디렉토리에 있는 모든 파일은 무시
build/

# doc/notes.txt 파일은 무시하고 doc/server/arch.txt 파일은 무시하지 않음
doc/*.txt

# doc 디렉토리 아래의 모든 .pdf 파일을 무시
doc/**/*.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;GitHub은 다양한 프로젝트에서 자주 사용하는 .gitignore 예제를 관리하고 있다. 어떤 내용을 넣을지 막막하다면 &lt;strong&gt;https://github.com/github/gitignore&lt;/strong&gt; 사이트에서 적당한 예제를 찾을 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;.gitignore&lt;/strong&gt;를 사용하는 간단한 방식은 하나의 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일을 최상위 디렉토리에 하나 두고 모든 하위 디렉토리에까지 적용시키는 방식이다. 물론 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일을 하나만 두는 것이 아니라 하위 디렉토리에도 추가로 둘 수도 있다. &lt;strong&gt;.gitignore&lt;/strong&gt; 정책은 현재 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일이 위치한 디렉토리와 그 하위 디렉토리에 적용된다. (리눅스 커널 소스 저장소에는 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일이 206개나 있음)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;다수의 &lt;strong&gt;.gitignore&lt;/strong&gt; 파일을 두고 정책을 적용하는 부분은 이 책에서 다루는 범위를 벗어난다. 자세한 내용은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man gitignore&lt;/code&gt;에서 확인할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;staged와-unstaged-상태의-변경-내용을-보기&quot;&gt;Staged와 Unstaged 상태의 변경 내용을 보기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;단순히 파일이 변경됐다는 사실이 아니라 어떤 내용이 변경됐는지 살펴보려면 git status 명령이 아니라 git diff 명령을 사용해야 한다. 보통 우리는 ‘수정했지만, 아직 Staged 파일이 아닌 것?’과 ‘어떤 파일이 Staged 상태인지?’가 궁금하기 때문에 git status 명령으로도 충분하다. 더 자세하게 볼 때는 git diff 명령을 사용하는데 Patch처럼 어떤 라인을 추가했고 삭제했는지가 궁금할 때 사용한다. git diff 는 나중에 더 자세히 다룬다.&lt;/p&gt;

&lt;p&gt;README 파일을 수정해서 Staged 상태로 만들고 CONTRIBUTING.md 파일은 그냥 수정만 해둔다. 이 상태에서 git status 명령을 실행하면 아래와 같은 메시지를 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    modified:   README

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;git diff 명령을 실행하면 수정했지만 아직 staged 상태가 아닌 파일을 비교해 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 명령은 워킹 디렉토리에 있는 것과 Staging Area에 있는 것을 비교한다. 그래서 수정하고 아직 Stage 하지 않은 것을 보여준다.&lt;/p&gt;

&lt;p&gt;만약 커밋하려고 Staging Area에 넣은 파일의 변경 부분을 보고 싶으면 git diff –staged 옵션을 사용한다. 이 명령은 저장소에 커밋한 것과 Staging Area에 있는 것을 비교한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;꼭 잊지 말아야 할 것이 있는데 git diff 명령은 마지막으로 커밋한 후에 수정한 것들 전부를 보여주지 않는다. git diff 는 Unstaged 상태인 것들만 보여준다. 수정한 파일을 모두 Staging Area에 넣었다면 git diff 명령은 아무것도 출력하지 않는다.&lt;/p&gt;

&lt;p&gt;CONTRIBUTING.md 파일을 Stage 한 후에 다시 수정해도 git diff 명령을 사용할 수 있다. 이때는 Staged 상태인 것과 Unstaged 상태인 것을 비교한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add CONTRIBUTING.md
$ echo '# test line' &amp;gt;&amp;gt; CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;git diff 명령으로 Unstaged 상태인 변경 부분을 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Staged 상태인 파일은 git diff –cached 옵션으로 확인한다. –staged 와 –cached 는 같은 옵션이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;외부 도구로 비교하기&lt;/strong&gt;&lt;br /&gt;이 책에서는 계속 &lt;strong&gt;git diff&lt;/strong&gt; 명령으로 여기저기서 써 먹는다. 즐겨 쓰거나 결과를 아름답게 보여주는 Diff 도구가 있으면 사용할 수 있다. &lt;strong&gt;git diff&lt;/strong&gt; 대신 &lt;strong&gt;git difftool&lt;/strong&gt; 명령을 사용해서 &lt;strong&gt;emerge&lt;/strong&gt;, &lt;strong&gt;vimdiff&lt;/strong&gt; 같은 도구로 비교할 수 있다. 상용 제품도 사용할 수 있다. &lt;strong&gt;git difftool –tool-help&lt;/strong&gt; 라는 명령은 사용가능한 도구를 보여준다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;변경사항-커밋하기&quot;&gt;변경사항 커밋하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;수정한 것을 커밋하기 위해 Staging Area에 파일을 정리했다. Unstaged 상태의 파일은 커밋되지 않는다는 것을 기억해야 한다. Git은 생성하거나 수정하고 나서 git add 명령으로 추가하지 않은 파일은 커밋하지 않는다. 그 파일은 여전히 Modified 상태로 남아 있다. 커밋하기 전에 git status 명령으로 모든 것이 Staged 상태인지 확인할 수 있다. 그 후에 git commit 을 실행하여 커밋한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Git 설정에 지정된 편집기가 실행되고, 아래와 같은 텍스트가 자동으로 포함된다 (아래 예제는 Vim 편집기의 화면이다. 이 편집기는 쉘의 EDITOR 환경 변수에 등록된 편집기이고 보통은 Vim이나 Emacs을 사용한다. 또 시작하기 에서 설명했듯이 git config –global core.editor 명령으로 어떤 편집기를 사용할지 설정할 수 있다).&lt;/p&gt;

&lt;p&gt;편집기는 아래와 같은 내용을 표시한다(아래 예제는 Vim 편집기).&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
&quot;.git/COMMIT_EDITMSG&quot; 9L, 283C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;자동으로 생성되는 커밋 메시지의 첫 라인은 비어 있고 둘째 라인부터 git status 명령의 결과가 채워진다. 커밋한 내용을 쉽게 기억할 수 있도록 이 메시지를 포함할 수도 있고 메시지를 전부 지우고 새로 작성할 수 있다 (정확히 뭘 수정했는지도 보여줄 수 있는데, git commit 에 -v 옵션을 추가하면 편집기에 diff 메시지도 추가된다). 내용을 저장하고 편집기를 종료하면 Git은 입력된 내용(#로 시작하는 내용을 제외한)으로 새 커밋을 하나 완성한다.&lt;/p&gt;

&lt;p&gt;메시지를 인라인으로 첨부할 수도 있다. commit 명령을 실행할 때 아래와 같이 -m 옵션을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit -m &quot;Story 182: Fix benchmarks for speed&quot;
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이렇게 첫번째 커밋을 작성해보았다. commit 명령은 몇 가지 정보를 출력하는데 위 예제는 (master) 브랜치에 커밋했고 체크섬은 (463dc4f)이라고 알려준다. 그리고 수정한 파일이 몇 개이고 삭제됐거나 추가된 라인이 몇 라인인지 알려준다.&lt;/p&gt;

&lt;p&gt;Git은 Staging Area에 속한 스냅샷을 커밋한다는 것을 기억해야 한다. 수정은 했지만, 아직 Staging Area에 넣지 않은 것은 다음에 커밋할 수 있다. 커밋할 때마다 프로젝트의 스냅샷을 기록하기 때문에 나중에 스냅샷끼리 비교하거나 예전 스냅샷으로 되돌릴 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;staging-area-생략하기&quot;&gt;Staging Area 생략하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;Staging Area는 커밋할 파일을 정리한다는 점에서 매우 유용하지만 복잡하기만 하고 필요하지 않은 때도 있다. 아주 쉽게 Staging Area를 생략할 수 있다. git commit 명령을 실행할 때 -a 옵션을 추가하면 Git은 Tracked 상태의 파일을 자동으로 Staging Area에 넣는다. 그래서 git add 명령을 실행하는 수고를 덜 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use &quot;git add &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 예제에서는 커밋하기 전에 git add 명령으로 CONTRIBUTING.md 파일을 추가하지 않았다는 점을 눈여겨보자. -a 옵션을 사용하면 모든 파일이 자동으로 추가된다. 편리한 옵션이긴 하지만 주의 깊게 사용해야 한다. 생각 없이 이 옵션을 사용하다 보면 추가하지 말아야 할 변경사항도 추가될 수 있기 때문이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일-삭제하기&quot;&gt;파일 삭제하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;Git에서 파일을 제거하려면 git rm 명령으로 Tracked 상태의 파일을 삭제한 후에(정확하게는 Staging Area에서 삭제하는 것) 커밋해야 한다. 이 명령은 워킹 디렉토리에 있는 파일도 삭제하기 때문에 실제로 파일도 지워진다.&lt;/p&gt;

&lt;p&gt;Git 명령을 사용하지 않고 단순히 워킹 디렉터리에서 파일을 삭제하고 git status 명령으로 상태를 확인하면 Git은 현재 “Changes not staged for commit” (즉, Unstaged 상태)라고 표시해준다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use &quot;git add/rm &amp;lt;file&amp;gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &amp;lt;file&amp;gt;...&quot; to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;그리고 git rm 명령을 실행하면 삭제한 파일은 Staged 상태가 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    deleted:    PROJECTS.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;커밋하면 파일은 삭제되고 Git은 이 파일을 더는 추적하지 않는다. 이미 파일을 수정했거나 Staging Area에(역주 - Git Index라고도 부른다) 추가했다면 -f 옵션을 주어 강제로 삭제해야 한다. 이 점은 실수로 데이터를 삭제하지 못하도록 하는 안전장치다. 커밋 하지 않고 수정한 데이터는 Git으로 복구할 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;또 Staging Area에서만 제거하고 워킹 디렉토리에 있는 파일은 지우지 않고 남겨둘 수 있다. 다시 말해서 하드디스크에 있는 파일은 그대로 두고 Git만 추적하지 않게 한다. 이것은 .gitignore 파일에 추가하는 것을 빼먹었거나 대용량 로그 파일이나 컴파일된 파일인 .a 파일 같은 것을 실수로 추가했을 때 쓴다. –cached 옵션을 사용하여 명령을 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rm --cached README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;여러 개의 파일이나 디렉토리를 한꺼번에 삭제할 수도 있다. 아래와 같이 git rm 명령에 file-glob 패턴을 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rm log/\*.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt; 앞에 \ 을 사용한 것을 기억하자. 파일명 확장 기능은 쉘에만 있는 것이 아니라 Git 자체에도 있기 때문에 필요하다. 이 명령은 log/ 디렉토리에 있는 .log 파일을 모두 삭제한다. 아래의 예제처럼 할 수도 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git rm \*~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 명령은 ~ 로 끝나는 파일을 모두 삭제한다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;파일-이름-변경하기&quot;&gt;파일 이름 변경하기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;Git은 다른 VCS 시스템과는 달리 파일 이름의 변경이나 파일의 이동을 명시적으로 관리하지 않는다. 다시 말해서 파일 이름이 변경됐다는 별도의 정보를 저장하지 않는다. Git은 똑똑해서 굳이 파일 이름이 변경되었다는 것을 추적하지 않아도 아는 방법이 있다. 파일의 이름이 변경된 것을 Git이 어떻게 알아내는지 살펴보자.&lt;/p&gt;

&lt;p&gt;이렇게 말하고 Git에 mv 명령이 있는 게 좀 이상하겠지만, 아래와 같이 파일 이름을 변경할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git mv file_from file_to
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;잘 동작한다. 이 명령을 실행하고 Git의 상태를 확인해보면 Git은 이름이 바뀐 사실을 알고 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use &quot;git reset HEAD &amp;lt;file&amp;gt;...&quot; to unstage)

    renamed:    README.md -&amp;gt; README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;사실 git mv 명령은 아래 명령어를 수행한 것과 완전 똑같다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mv README.md README
$ git rm README.md
$ git add README
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;git mv 명령은 일종의 단축 명령어이다. 이 명령으로 파일 이름을 바꿔도 되고 mv 명령으로 파일 이름을 직접 바꿔도 된다. 단지 git mv 명령은 편리하게 명령을 세 번 실행해주는 것 뿐이다. 어떤 도구로 이름을 바꿔도 상관없다. 중요한 것은 이름을 변경하고 나서 꼭 rm/add 명령을 실행해야 한다는 것 뿐이다.&lt;/p&gt;

&lt;p&gt;[출처]https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-%EC%88%98%EC%A0%95%ED%95%98%EA%B3%A0-%EC%A0%80%EC%9E%A5%EC%86%8C%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%98%EA%B8%B0&lt;/p&gt;</content><author><name></name></author><category term="GIT" /><category term="기초" /><category term="수정하기" /><category term="저장하기" /><summary type="html">Git의 기초 - 수정하고 저장소에 저장하기</summary></entry><entry><title type="html">04.GIT 저장소 만들기</title><link href="http://localhost:4000/2019/12/08/GIT-04-creating-git-repository" rel="alternate" type="text/html" title="04.GIT 저장소 만들기" /><published>2019-12-08T11:17:13+09:00</published><updated>2019-12-08T11:17:13+09:00</updated><id>http://localhost:4000/2019/12/08/GIT-04-creating-git-repository</id><content type="html" xml:base="http://localhost:4000/2019/12/08/GIT-04-creating-git-repository">&lt;h5 id=&quot;git의-기초---git-저장소-만들기&quot;&gt;Git의 기초 - Git 저장소 만들기&lt;/h5&gt;

&lt;p&gt;Git에서 자주 사용하는 명령어는 모두 이후에 올리게 될 것이다. 추후 업데이트 되는 내용을 다 읽으면 저장소를 만들고 설정하는 방법, 파일을 추적하거나(Track) 추적을 그만두는 방법, 변경 내용을 Stage 하고 커밋하는 방법을 알게 된다. 파일이나 파일 패턴을 무시하도록 Git을 설정하는 방법, 실수를 쉽고 빠르게 만회하는 방법, 프로젝트 히스토리를 조회하고 커밋을 비교하는 방법, 리모트 저장소에 Push 하고 Pull 하는 방법을 살펴본다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;git-저장소-만들기&quot;&gt;Git 저장소 만들기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;주로 다음 주 가지 중 한 가지 방법으로 Git 저장소를 쓰기 시작한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;아직 버전관리를 하지 않는 로컬 디렉토리 하나를 선택해서 Git 저장소를 적용하는 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 어딘가에서 Git 저장소를 &lt;strong&gt;Clone&lt;/strong&gt; 하는 방법&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;어떤 방법을 사용하든 로컬 디렉토리에 Git 저장소가 준비되면 이제 뭔가 해볼 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;기존-디렉토리를-git-저장소로-만들기&quot;&gt;기존 디렉토리를 “Git 저장소”로 만들기&lt;/h5&gt;

&lt;p&gt;버전관리를 하지 아니하는 기존 프로젝트를 Git으로 관리하고 싶은 경우 우선 프로젝트의 디렉토리로 이동한다. 이러한 과정을 처음 해보는 것이라면 시스템마다 조금 다른 점을 주의하자.&lt;/p&gt;

&lt;p&gt;Linux:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /home/user/my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mac:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /Users/user/my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Windows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd /c/user/my_project
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그리고 아래와 같은 명령을 실행한다:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 명령은 &lt;strong&gt;.git&lt;/strong&gt; 이라는 하위 디렉토리를 만든다. &lt;strong&gt;.git&lt;/strong&gt; 디렉토리에는 저장소에 필요한 뼈대 파일(Skeleton)이 들어 있다. 이 명령만으로는 아직 프로젝트의 어떤 파일도 관리하지 않는다. (&lt;strong&gt;.git&lt;/strong&gt; 디렉토리가 막 만들어진 직후에 정확히 어떤 파일이 있는지에 대한 내용은 &lt;strong&gt;Git의 내부&lt;/strong&gt;에서 다룬다)&lt;/p&gt;

&lt;p&gt;Git이 파일을 관리하게 하려면 저장소에 파일을 추가하고 커밋해야 한다. &lt;strong&gt;git add&lt;/strong&gt; 명령으로 파일을 추가하고 &lt;strong&gt;git commit&lt;/strong&gt; 명령으로 커밋한다:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;위의 명령어를 통해 *.c로 된 파일을 추가하고, LICENSE 파일을 추가하는 작업을 한 후 에 git commit이 이루어진 것이다. 해당 폴더의 모든 파일을 추가할 경우 아래와 같이 하는 경우가 내 경우에는 더 많다. (단, 제외 파일 목록 관리를 잘해야한다. 추후에 다루겠다.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;명령어 몇 개로 순식간에 Git 저장소를 만들고 파일 버전 관리를 시작했다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;기존-저장소를-clone-하기&quot;&gt;기존 저장소를 Clone 하기&lt;/h5&gt;

&lt;p&gt;다른 프로젝트에 참여하려거나(Contribute) Git 저장소를 복사하고 싶을 때 &lt;strong&gt;git clone&lt;/strong&gt; 명령을 사용한다. 이미 Subversion 같은 VCS에 익숙한 사용자에게는 “checkout” 이 아니라 “clone” 이라는 점이 도드라져 보일 것이다. Git이 Subversion과 다른 가장 큰 차이점은 서버에 있는 거의 모든 데이터를 복사한다는 것이다. &lt;strong&gt;git clone&lt;/strong&gt; 을 실행하면 프로젝트 히스토리를 전부 받아온다. 실제로 서버의 디스크가 망가져도 클라이언트 저장소 중에서 아무거나 하나 가져다가 복구하면 된다(서버에만 적용했던 설정은 복구하지 못하지만 모든 데이터는 복구된다 - 서버에 Git 설치하기에서 좀 더 자세히 다룬다).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git clone &amp;lt;url&amp;gt;&lt;/strong&gt; 명령으로 저장소를 Clone 한다. &lt;strong&gt;libgit2&lt;/strong&gt; 라이브러리 소스코드를 Clone 하려면 아래과 같이 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/libgit2/libgit2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이 명령은 “libgit2” 라는 디렉토리를 만들고 그 안에 &lt;strong&gt;.git&lt;/strong&gt; 디렉토리를 만든다. 그리고 저장소의 데이터를 모두 가져와서 자동으로 가장 최신 버전을 Checkout 해 놓는다. &lt;strong&gt;libgit2&lt;/strong&gt; 디렉토리로 이동하면 Checkout으로 생성한 파일을 볼 수 있고 당장 하고자 하는 일을 시작할 수 있다.&lt;/p&gt;

&lt;p&gt;아래과 같은 명령을 사용하여 저장소를 Clone 하면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgit2&lt;/code&gt;이 아니라 다른 디렉토리 이름으로 Clone 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/libgit2/libgit2 mylibgit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;디렉토리 이름이 &lt;strong&gt;mylibgit&lt;/strong&gt; 이라는 것만 빼면 이 명령의 결과와 앞선 명령의 결과는 같다.&lt;/p&gt;

&lt;p&gt;Git은 다양한 프로토콜을 지원한다. 이제까지는 &lt;strong&gt;https://&lt;/strong&gt; 프로토콜을 사용했지만 &lt;strong&gt;git://&lt;/strong&gt; 를 사용할 수도 있고 &lt;strong&gt;user@server:path/to/repo.git&lt;/strong&gt; 처럼 SSH 프로토콜을 사용할 수도 있다. 자세한 내용은 서버에 Git 설치하기에서 다루며 각 프로토콜의 장단점과 Git 저장소에 접근하는 방법을 설명한다.&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red;font-size:20px;&quot;&gt; &lt;strong&gt;Git을 시작하기에 매우 중요한 내용이기 때문에 이 내용을 모르고 Git을 시작한다는 것은 거의 불가능하다. 따라서, 본 내용을 반드시 숙지하는 것이 좋다.&lt;/strong&gt; &lt;/span&gt;&lt;/p&gt;

&lt;p&gt;[출처]https://git-scm.com/book/ko/v2/Git%EC%9D%98-%EA%B8%B0%EC%B4%88-Git-%EC%A0%80%EC%9E%A5%EC%86%8C-%EB%A7%8C%EB%93%A4%EA%B8%B0&lt;/p&gt;</content><author><name></name></author><category term="GIT" /><category term="기초" /><category term="저장소" /><summary type="html">Git의 기초 - Git 저장소 만들기</summary></entry><entry><title type="html">03.GIT 시작하기에 앞서 알면 좋은 것(도움말 보기)</title><link href="http://localhost:4000/2019/12/08/GIT-03-how-to-use-help" rel="alternate" type="text/html" title="03.GIT 시작하기에 앞서 알면 좋은 것(도움말 보기)" /><published>2019-12-08T10:30:13+09:00</published><updated>2019-12-08T10:30:13+09:00</updated><id>http://localhost:4000/2019/12/08/GIT-03-how-to-use-help</id><content type="html" xml:base="http://localhost:4000/2019/12/08/GIT-03-how-to-use-help">&lt;h5 id=&quot;git을-사용하기-앞서-알면-좋은-내용&quot;&gt;Git을 사용하기 앞서 알면 좋은 내용&lt;/h5&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;git-도움말-보기&quot;&gt;Git 도움말 보기&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;명령어에 대한 도움말이 필요할 때 도움말을 보는 방법은 두 가지로 동일한 결과를 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git help &amp;lt;verb&amp;gt;
$ man git-&amp;lt;verb&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예를 들어 아래와 같이 실행하면 &lt;strong&gt;git config&lt;/strong&gt; 명령에 대한 도움말을 볼 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git help config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도움말은 언제 어디서나 볼 수 있다. 오프라인으로도 볼 수 있다. 도움말과 이 책으로 부족하면 다른 사람의 도움을 받는 것이 필요하다. Freenode IRC 서버(irc.freenode.net)에 있는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#git&lt;/code&gt; 이나 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#github&lt;/code&gt; 채널로 찾아가라. 이 채널에는 보통 수백 명의 사람이 접속해 있다. 모두 Git에 대해 잘 알고 있다. 기꺼이 도와줄 것이다.&lt;/p&gt;

&lt;p&gt;Git 명령을 사용하기 위해 매우 자세한 도움말 전체를 볼 필요 없이 각 명령에서 사용할 수 있는 옵션들에 대해서 간략히 살펴볼수도 있다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-h&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt; 옵션을 사용하면 다음과 같이 Git 명령에서 사용할 수 있는 옵션들에 대한 간단한 도움말을 출력한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git_help_config.png&quot; width=&quot;100%&quot; height=&quot;100%&quot; title=&quot;git_help_config&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add -h
usage: git add [&amp;lt;options&amp;gt;] [--] &amp;lt;pathspec&amp;gt;...

    -n, --dry-run         dry run
    -v, --verbose         be verbose

    -i, --interactive     interactive picking
    -p, --patch           select hunks interactively
    -e, --edit            edit current diff and apply
    -f, --force           allow adding otherwise ignored files
    -u, --update          update tracked files
    -N, --intent-to-add   record only the fact that the path will be added later
    -A, --all             add changes from all tracked and untracked files
    --ignore-removal      ignore paths removed in the working tree (same as --no-all)
    --refresh             don't add, only refresh the index
    --ignore-errors       just skip files which cannot be added because of errors
    --ignore-missing      check if - even missing - files are ignored in dry run
    --chmod &amp;lt;(+/-)x&amp;gt;      override the executable bit of the listed files
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[출처]https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EB%8F%84%EC%9B%80%EB%A7%90-%EB%B3%B4%EA%B8%B0&lt;/p&gt;</content><author><name></name></author><category term="GIT" /><category term="시작하기" /><category term="도움말" /><summary type="html">Git을 사용하기 앞서 알면 좋은 내용</summary></entry><entry><title type="html">02.GIT 초기 설정하기</title><link href="http://localhost:4000/2019/12/07/GIT-02-initial-settings" rel="alternate" type="text/html" title="02.GIT 초기 설정하기" /><published>2019-12-07T23:17:13+09:00</published><updated>2019-12-07T23:17:13+09:00</updated><id>http://localhost:4000/2019/12/07/GIT-02-initial-settings</id><content type="html" xml:base="http://localhost:4000/2019/12/07/GIT-02-initial-settings">&lt;h5 id=&quot;git-시작하기-위한-설정하기&quot;&gt;Git 시작하기 위한 설정하기&lt;/h5&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;git-최초-설정&quot;&gt;Git 최초 설정&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;Git을 설치하고 나면 Git의 사용 환경을 적절하게 설정해 주어야 한다. 환경 설정은 한 컴퓨터에서 한 번만 하면 된다. 설정한 내용은 Git을 업그레이드해도 유지된다. 언제든지 다시 바꿀 수 있는 명령어도 있다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;‘git config’라는 도구로 설정 내용을 확인하고 변경할 수 있다. Git은 이 설정에 따라 동작한다. 이때 사용하는 설정 파일은 세 가지나 된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;/etc/gitconfig 파일: 시스템의 모든 사용자와 모든 저장소에 적용되는 설정이다. git config –system 옵션으로 이 파일을 읽고 쓸 수 있다. (이 파일은 시스템 전체 설정파일이기 때문에 수정하려면 시스템의 관리자 권한이 필요하다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;~/.gitconfig, ~/.config/git/config 파일: 특정 사용자(즉 현재 사용자)에게만 적용되는 설정이다. git config –global 옵션으로 이 파일을 읽고 쓸 수 있다. 특정 사용자의 모든 저장소 설정에 적용된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;.git/config : 이 파일은 Git 디렉토리에 있고 특정 저장소(혹은 현재 작업 중인 프로젝트)에만 적용된다. –local 옵션을 사용하면 이 파일을 사용하도록 지정할 수 있다. 하지만 기본적으로 이 옵션이 적용되어 있다. (당연히, 이 옵션을 적용하려면 Git 저장소인 디렉토리로 이동 한 후 적용할 수 있다.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;각 설정은 역순으로 우선시 된다. 그래서 &lt;strong&gt;.git/config&lt;/strong&gt; 가 &lt;strong&gt;/etc/gitconfig&lt;/strong&gt; 보다 우선한다.&lt;/p&gt;

&lt;p&gt;Windows에서는 &lt;strong&gt;$HOME&lt;/strong&gt; 디렉토리에서 &lt;strong&gt;.gitconfig&lt;/strong&gt; 파일을 찾는다(아마도 &lt;strong&gt;C:\Users\$USER&lt;/strong&gt; 디렉토리). Windows에서도 &lt;strong&gt;/etc/gitconfig&lt;/strong&gt; 파일은 그 경로에서 찾는다. 이 경로는 아마도 MSys 루트의 상대경로일 텐데, MSys 루트는 인스톨러로 Git을 Windows에 설치할 때 결정된다. Git for Windows 2.x 버전에서는 조금 다르다. Windows XP 사용자는 &lt;strong&gt;C:\Documents and Settings\All Users\Application Data\Git\config&lt;/strong&gt; 디렉토리에서 찾을 수 있고 Windows Vista 이후 버전 사용자는 &lt;strong&gt;C:\ProgramData\Git\config&lt;/strong&gt; 에서 찾을 수 있다. 이 시스템 설정 파일의 경로는 &lt;strong&gt;git config -f &amp;lt;file&amp;gt;&lt;/strong&gt; 명령으로 변경할 수 있다. 관리자 권한이 필요하다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;사용자-정보-설정&quot;&gt;사용자 정보 설정&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;Git을 설치하고 나서 가장 먼저 해야 하는 것은 사용자이름과 이메일 주소를 설정하는 것이다. Git은 커밋할 때마다 이 정보를 사용한다. 한 번 커밋한 후에는 정보를 변경할 수 없다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global user.name &quot;lsirikh&quot;
$ git config --global user.email lsirikh@naver.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;다시 말하자면 &lt;strong&gt;–global&lt;/strong&gt; 옵션으로 설정하는 것은 딱 한 번만 하면 된다. 해당 시스템에서 해당 사용자가 사용할 때는 이 정보를 사용한다. 만약 프로젝트마다 다른 이름과 이메일 주소를 사용하고 싶으면 &lt;strong&gt;–global&lt;/strong&gt; 옵션을 빼고 명령을 실행한다.&lt;/p&gt;

&lt;p&gt;[GUI 도구들은 처음 실행할 때 이 설정을 묻는다.]&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;편집기-설정&quot;&gt;편집기 설정&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;사용자 정보를 설정하고 나면 Git에서 사용할 텍스트 편집기를 고른다. 기본적으로 Git은 시스템의 기본 편집기를 사용한다.&lt;/p&gt;

&lt;p&gt;하지만, Emacs 같은 다른 텍스트 편집기를 사용할 수 있고 아래와 같이 실행하면 된다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;꼭 이것을 쓰라는 얘기는 아니고 바꿀수 있는 참고로 활용&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global core.editor emacs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Windows 사용자라면 다른 텍스트 편집기를 사용할 수 있다. 실행파일의 전체 경로를 설정해주면 된다. 실행파일의 전체 경로는 사용하는 편집기에 따라 다르다.&lt;/p&gt;

&lt;p&gt;Windows 환경에서 많이 사용되는 Notepad &lt;strong&gt;편집기의 경우 주로 32비트 버전을 사용하게 된다. 현재 기준으로 64비트 버전을 사용하면 동작하지 않는 플러그인이 많다. 32비트 Windows 시스템이거나, 64비트 Windows 시스템에서 64비트 Notepad&lt;/strong&gt;을 설치했다면 다음과 같이 설정한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global core.editor &quot;'C:/Program Files/Notepad++/notepad++.exe' -multiInst -nosession&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;64비트 Windows 시스템에서 32비트 Notepad++을 설치했다면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Program Files (x86)&lt;/code&gt;에 설치된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global core.editor &quot;'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -nosession&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Note&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Vim과 Emacs, Notepad++은 꽤 인기 있는 편집기로 개발자들이 즐겨 사용한다. Mac이나 Linux 같은 Unix 시스템, Windows 시스템에서 사용 가능하다. 여기서 소개하는 편집기들이 불편해서 다른 편집기를 사용하고자 한다면 해당 편집기를 Git 편집기로 설정하는 방법을 찾아봐야 한다.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Warning&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;자신의 편집기를 설정하지 않으면 갑자기 실행된 편집기에 당황할 수 있다. 그땐 당황하지 말고 편집기를 그냥 종료하면 Git 명령을 취소할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;설정-확인&quot;&gt;설정 확인&lt;/h5&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;git config –list&lt;/strong&gt; 명령을 실행하면 설정한 모든 것을 보여주어 바로 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Git은 같은 키를 여러 파일(&lt;strong&gt;/etc/gitconfig&lt;/strong&gt; 와 &lt;strong&gt;~/.gitconfig&lt;/strong&gt; 같은)에서 읽기 때문에 같은 키가 여러 개 있을 수도 있다. 그러면 Git은 나중 값을 사용한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;git config &amp;lt;key&amp;gt;&lt;/strong&gt; 명령으로 Git이 특정 Key에 대해 어떤 값을 사용하는지 확인할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config user.name
lsirikh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Note&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Git이 설정된 값을 읽을 때 여러 파일에서 동일한 키에 대해 다른 값을 설정하고 있을 수 있다. 값이 기대한 값과 다를 수 있는데 값만 보고 쉽게 그 원인을 찾을 수 없다. 이 때 키에 설정된 값이 어디에서 설정되었는지 확인할 수 있는데 다음과 같은 명령으로 어떤 파일로부터 설정된 값인지를 확인할 수 있다.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --show-origin rerere.autoUpdate
file:/home/lsirikh/.gitconfig	false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;[출처]https://git-scm.com/book/ko/v2/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-Git-%EC%B5%9C%EC%B4%88-%EC%84%A4%EC%A0%95&lt;/p&gt;</content><author><name></name></author><category term="GIT" /><category term="initial" /><category term="commit" /><category term="초기" /><category term="커밋" /><summary type="html">Git 시작하기 위한 설정하기</summary></entry><entry><title type="html">04.ROS를 GUI 기반 IDE 툴 qt creator 설치(우분투 16.04 Kinetic Kame)</title><link href="http://localhost:4000/2019/12/06/ROS-04-ros-roscore-qt-creator" rel="alternate" type="text/html" title="04.ROS를 GUI 기반 IDE 툴 qt creator 설치(우분투 16.04 Kinetic Kame)" /><published>2019-12-06T23:12:13+09:00</published><updated>2019-12-06T23:12:13+09:00</updated><id>http://localhost:4000/2019/12/06/ROS-04-ros-roscore-qt-creator</id><content type="html" xml:base="http://localhost:4000/2019/12/06/ROS-04-ros-roscore-qt-creator">&lt;h5 id=&quot;1-qt-creator란&quot;&gt;1. Qt Creator란?&lt;/h5&gt;

&lt;p&gt;Qt Creator는 Qt GUI 애플리케이션 개발 프레임 워크 용 SDK의 일부인 크로스 플랫폼 C ++, JavaScript 및 QML 통합 개발 환경입니다. 시각적 디버거와 통합 GUI 레이아웃 및 양식 디자이너가 포함되어 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/QtProject-creator-icon.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Qt는 컴퓨터 프로그래밍에서 GUI 프로그램 개발에 널리 쓰이는 크로스 플랫폼 프레임워크이다. 서버용 콘솔과 명령 줄 도구와 같은 비GUI 프로그램 개발에도 사용된다. 그래픽 사용자 인터페이스를 사용하는 경우에는 Qt를 위젯 툴킷으로 분류한다. 회사 내부에서는 Qt를 “cute”로 발음하고 있으며 비공식적으로는 “큐티”로 발음한다. Qt는 KDE, Qtopia, OPIE에 이용되고 있다,&lt;/p&gt;

&lt;p&gt;노르웨이 회사 트롤텍에 의해서 개발되었다. 2008년 1월에는 노키아에 인수되었다.[2] 이후, 2012년 8월에 핀란드 회사 Digia에 인수되었다.[3]&lt;/p&gt;

&lt;p&gt;Qt는 C++를 주로 사용하지만, 파이썬, 루비, C, 펄, 파스칼과도 연동된다. 수많은 플랫폼에서 동작하며, 상당히 좋은 국제화를 지원한다. SQL 데이터베이스 접근, XML 처리, 스레드 관리, 단일 크로스 플랫폼 파일 관리 API를 제공한다.&lt;/p&gt;

&lt;p&gt;[출처] 위키백과 https://ko.wikipedia.org/wiki/Qt_(%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC)&lt;/p&gt;

&lt;h5 id=&quot;2-qt-creator-설치하기&quot;&gt;2. Qt Creator 설치하기&lt;/h5&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install qtcreator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;리눅스가 좋은 점은 바로 이런 apt-get install이란 간편한 방법으로 설치가 가능하다는 점이다.&lt;/p&gt;

&lt;p&gt;일단 설치하고 실행하면 다음과 같이 나오는 것을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/qtcreator_ide.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="ROS" /><category term="qt" /><category term="creator" /><summary type="html">1. Qt Creator란?</summary></entry><entry><title type="html">03.ROS를 테스트 터틀봇 움직이기(우분투 16.04 Kinetic Kame)</title><link href="http://localhost:4000/2019/12/06/ROS-03-ros-roscore-test" rel="alternate" type="text/html" title="03.ROS를 테스트 터틀봇 움직이기(우분투 16.04 Kinetic Kame)" /><published>2019-12-06T21:50:13+09:00</published><updated>2019-12-06T21:50:13+09:00</updated><id>http://localhost:4000/2019/12/06/ROS-03-ros-roscore-test</id><content type="html" xml:base="http://localhost:4000/2019/12/06/ROS-03-ros-roscore-test">&lt;h5 id=&quot;1-ros-동작-테스트-해보기&quot;&gt;1. ROS 동작 테스트 해보기&lt;/h5&gt;

&lt;p&gt;일단 ROS를 설치 했기 때문에 뭐라도 구동하여 ROS가 작동하는 원리를 보고 싶은 마음이 들 것이다. 나도 처음에 설치 했을 때, 로봇에 한 발자국 더 다가간 것 같았다.&lt;/p&gt;

&lt;p&gt;일단 거북이라도 돌아다니는 걸 보고 싶다면 함께 해보는 것도 좋을 것 같다.&lt;/p&gt;

&lt;h5 id=&quot;2-roscore-실행하기&quot;&gt;2. roscore 실행하기&lt;/h5&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ roscore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/ros/roscore_execution.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ROS는 기본적으로 CORE를 기반으로 작동하는 시스템이다. 따라서, Supervisor인 Core가 없으면 동작하지 않는다.&lt;/p&gt;

&lt;h5 id=&quot;2-turtlesim-패키지의-turtlesim_node-실행하기&quot;&gt;2. turtlesim 패키지의 turtlesim_node 실행하기&lt;/h5&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rosrun turtlesim turtlesim_node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ROS의 노드는 실행하기 위하여 rosrun이라는 커맨드를 활용한다.&lt;/p&gt;

&lt;p&gt;통신을 하기 위한 한 명의 노드 클라이언트를 등록했다. turtlesim_node는 turtlesim 패키지에 포함된 visual 기능을 갖고 있는 노드이다.&lt;/p&gt;

&lt;p&gt;따라서, 화면에 보이는 거북이를 움직이기 위해서는 명령 신호를 보내주는 노드를 또 등록해야 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/turtlesim_node.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/turtlesim_image.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;3-turtlesim_node를-콘트롤하기-위한-turtle_teleop_key-노드-실행하기&quot;&gt;3. turtlesim_node를 콘트롤하기 위한 turtle_teleop_key 노드 실행하기&lt;/h5&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rosrun turtlesim turtle_teleop_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/turtle_teleop_key.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 키보드의 방향키를 움직여 보자.&lt;/p&gt;

&lt;p&gt;회전방향을 정하는 좌우 방향키와 병진속도(병신 아님)를 결정하는 앞뒤 방향키로 거북이를 컨트롤 할 수 있게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/controlled_turtle.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;4-rqt_graph&quot;&gt;4. rqt_graph&lt;/h5&gt;

&lt;p&gt;현재 ROS 시스템에 맞물려 있는 노드들의 관계와 메세지의 종류 등을 한눈에 이미지로 확인하는 좋은 툴은 ROS에서 제공을 해주고 있다.&lt;/p&gt;

&lt;p&gt;처음 ROS를 접하면 다소 투박해 보이는 이미지 일 수 있으나, 추후 많은 노드들 간의 관계를 파악하는데 많이 활용하게 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rqt_graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/ros/rqt_graph.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 ROS의 시스템을 대충 이해할 수 있는 상태가 됐을 것 같다. 물론 거북이 움직였다고 ROS를 이해할 수 없겠지만, 뭔가 창이 많이 뜨고, 서로 신호를 보내고 받는 노드들 사이에 프로그래밍이겠구나 라는 이해를 말하는 것이다.&lt;/p&gt;</content><author><name></name></author><category term="ROS" /><category term="turtlesim" /><category term="test" /><summary type="html">1. ROS 동작 테스트 해보기</summary></entry><entry><title type="html">01.GIT이란 무엇인가?</title><link href="http://localhost:4000/2019/12/06/GIT-01-introduction" rel="alternate" type="text/html" title="01.GIT이란 무엇인가?" /><published>2019-12-06T20:17:13+09:00</published><updated>2019-12-06T20:17:13+09:00</updated><id>http://localhost:4000/2019/12/06/GIT-01-introduction</id><content type="html" xml:base="http://localhost:4000/2019/12/06/GIT-01-introduction">&lt;h5 id=&quot;git-이란-무엇인가&quot;&gt;Git 이란 무엇인가???&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/480px-Octocat_GitHub_Mascot.png&quot; width=&quot;40%&quot; height=&quot;40%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/git.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub를 이해하려면 먼저 Git을 이해해야합니다. Git은 리눅스를 만든 사람인 Linus Torvalds에 의해 시작된 오픈 소스 버전 관리 시스템입니다. Git은 Subversion , CVS 및 Mercurial 과 같은 다른 버전 제어 시스템과 유사합니다.&lt;/p&gt;

&lt;p&gt;Git은 버전 관리 시스템이지만 무엇일까?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;예를 들어, 개발자가 무언가 앱을 만들면 코드가 지속적으로 변경되어 첫 번째 공식 (베타 이외) 릴리스 이후에 새 버전이 릴리스됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;버전 제어 시스템은 이러한 개정을 똑바로 유지하여 수정 사항을 중앙 저장소에 저장합니다. 이를 통해 개발자는 새로운 버전의 소프트웨어를 다운로드하고 변경하며 최신 버전을 업로드 할 수 있으므로 쉽게 협업 할 수 있습니다. 모든 개발자는 이러한 새로운 변경 사항을 보고 다운로드하여 제공 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;마찬가지로, 프로젝트 개발과 관련이 없는 사람들도 공개된 GIT ​​파일을 다운로드하여 사용할 수 있습니다. Git이 시작된 배경이 Linux 환경이기 때문에 Linux에서 좀 더 활용도가 용이 할 수 있지만, 현재 Windows나 OS X에도 많은 지원이 되는 관계로 이제는 크게 무관한 것으로 보입니다.&lt;/p&gt;

&lt;p&gt;Git은 사용 가능한 다른 시스템에 비해 여러 가지 장점이 있기 때문에 대부분의 개발자가 선호하는 버전 제어 시스템입니다. 파일 변경 사항을보다 효율적으로 저장하고 파일 무결성을 향상시킵니다. 세부 사항을 알고 싶다면  Git 기본 페이지  에 Git 작동 방식에 대한 자세한 설명이 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;github의-허브&quot;&gt;GitHub의 “허브”&lt;/h5&gt;

&lt;p&gt;Git와 함께 사용하여 더 나은 버전 제어 시스템을 확립했습니다. 그렇다면 GitHub는 무엇일까요? Git은 명령 줄 도구이지만 Git revolve와 관련된 모든 것은 프로젝트와 관련된 내용을 저장하는 허브 (GitHub.com)입니다.&lt;/p&gt;

&lt;h5 id=&quot;repository-저장소&quot;&gt;repository (저장소)&lt;/h5&gt;

&lt;p&gt;repository (일반적으로 “repo”로 약칭)는 특정 프로젝트의 모든 파일이 저장되는 위치입니다. 각 프로젝트에는 자체 저장소가 있으며 고유 한 URL로 액세스 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/git/repository_example.png&quot; width=&quot;80%&quot; height=&quot;80%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;fork&quot;&gt;Fork&lt;/h5&gt;

&lt;p&gt;“Forking”(발음주의;뽀킹아님)은 이미 존재하는 다른 프로젝트를 기반으로 새 프로젝트를 만들 때 사용합니다. 이것은 프로그램 및 기타 프로젝트의 추가 개발을 손쉽게 할 수 있는 굉장히 놀라운 컨셉인 것 같습니다. GitHub에서 기여하고 싶은 프로젝트를 찾으면 저장소(Repo)를 Fork 하고 원하는대로 변경하고 수정 된 프로젝트를 새 Repo로 릴리스 할 수 있습니다. 새 프로젝트를 작성하기 위해 Fork(분기) 한 원래 저장소가 업데이트되면 해당 업데이트를 현재 분기에 쉽게 추가 할 수 있습니다. 분기 추가의 권한은 원천 개발자에게 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;pull&quot;&gt;Pull&lt;/h5&gt;

&lt;p&gt;어떤 개발자가 Repository(repo)를 Fork(분기)하고 프로젝트를 크게 수정 한 후 원래 Repository 주인 혹은 개발자가 이를 인정해주고 원래 프로젝트에 참여시켜주기 원할 수도 있습니다. 그럴 경우 풀 요청을 하면 프로젝트에 참여가 가능합니다. 물론 원본 Repository(이하 리포지토리)의 작성자는 자신의 작업을보고 공식 프로젝트에 수락할지 여부를 선택할 수 있습니다. Pull 요청을 발행 할 때마다 GitHub는 사용자와 기본 프로젝트 관리자가 통신 할 수있는 완벽한 수단을 제공합니다.&lt;/p&gt;

&lt;h5 id=&quot;social-networking&quot;&gt;Social networking&lt;/h5&gt;

&lt;p&gt;사회적 네트워킹 측면에서 GitHub가 가장 강력한 특징을 지닌듯 합니다. 특히, GitHub가 가지는 다양한 특징과 장점을 압도하는 가장 중요한 점이기도 합니다. GitHub의 각 사용자는 이력서처럼 작동하는 자체 프로필을 가지고 있으며 과거 작업 및 풀 요청을 통해 다른 프로젝트에 대한 기여를 보여줍니다. 한마디로 기여도에 무임승차자가 없고, 기여도로 평가할 수 있는 중요한 지표를 제공해줍니다.&lt;/p&gt;

&lt;p&gt;GitHub를 통해 프로젝트 revision은 공개적으로 논의 될 수 있고, 많은 전문가들이 해당 프로젝트를 발전시키기 위해 지식을 제공하고 협력 할 수 있습니다. GitHub가 등장하기 전에, 어떤 프로젝트에 관심이있는 개발자는 대개 프로젝트 리딩 개발자와 연락 할 수있는 방법을 수소문 한 후, 자신의 신뢰도와 신력을 입증하여야만 참여가능 했으리라 생각됩니다. 아마도 너무나 높은 난관과 진입장벽으로 협업은 거의 불가능 했던 것 같습니다. 그러나 GitHub는 일종의 협력과 상생의 헤게모니를 열었다는 측면에서 굉장한 사회적 충격을 주는 듯 합니다.&lt;/p&gt;

&lt;h5 id=&quot;changelogs&quot;&gt;Changelogs&lt;/h5&gt;

&lt;p&gt;여러 사람이 한 프로젝트에서 공동 작업 할 때 해당 파일이 저장되는 대상,시기 및 위치를 변경 한 수정본을 추적하기가 어렵습니다. GitHub는 리포지토리에 푸시 된 모든 변경 사항을 추적하여이 문제를 처리합니다.&lt;/p&gt;

&lt;p&gt;[출처] https://www.howtogeek.com/180167/htg-explains-what-is-github-and-what-do-geeks-use-it-for/&lt;/p&gt;</content><author><name></name></author><category term="GIT" /><category term="introduction" /><summary type="html">Git 이란 무엇인가???</summary></entry><entry><title type="html">02.ROS environmental settings for beginners ROS 환경설정 우분투 16.04 Kinetic Kame</title><link href="http://localhost:4000/2019/12/05/ROS-02-ros-environmetal-settings" rel="alternate" type="text/html" title="02.ROS environmental settings for beginners ROS 환경설정 우분투 16.04 Kinetic Kame" /><published>2019-12-05T17:36:13+09:00</published><updated>2019-12-05T17:36:13+09:00</updated><id>http://localhost:4000/2019/12/05/ROS-02-ros-environmetal-settings</id><content type="html" xml:base="http://localhost:4000/2019/12/05/ROS-02-ros-environmetal-settings">&lt;h5 id=&quot;1-ros-환경설정&quot;&gt;1. ROS 환경설정&lt;/h5&gt;

&lt;p&gt;ROS 설치 과정에서 사용된 다음 명령어는 터미널 창을 실행할 때마다 계속 입력해야한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source /opt/ros/kinetic/setup.bash
$ source ~/catkin_ws/devel/setup.bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이러한 번거로운 작업을 없애기 위해서 새로운 터미널 창을 열 때 마다 정해진 환경설정 파일을 읽어오도록 할 수 있다. 이외 ROS 네트워를 설정하고 자주 사용하는 명령어를 단축 명령어로 만들어 보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo gedit ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo nano ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;잠깐!&lt;/p&gt;

&lt;p&gt;내 IP주소를 잠깐 확인해보자.&lt;/p&gt;

&lt;p&gt;ROS 네트워크 설정을 위해서 IP 주소가 필요할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ifconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ifconfig.png&quot; width=&quot;40%&quot; height=&quot;30%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;wlp2s0(무선일 때)의  inet addr:xxx.xxx.xx.xx? 여기를 확인하자.&lt;br /&gt;
enp3s0(유선일 때)의  inet addr:xxx.xxx.xx.xx? 여기를 확인하자.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[참고]리눅스에서 자신의 IP를 확인하기 위해 ifconfig 명령어를 사용한다. 유선인 경우 enp3s0, 무선일 경우 wlp2s0의 inet addr에 자신의 IP 주소가 표시된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다시 환경설정으로 돌아가서…&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Set ROS Kinetic
source /opt/ros/kinetic/setup.bash
source ~/catkin_ws/devel/setup.bash

# Set ROS Network
export ROS_HOSTNAME = xxx.xxx.xxx.xxx
export ROS_MASTER_URI = http://${ROS_HOSTNAME}:11311

# Set ROS alias command
alias cw='cd ~/catkin_ws'
alias cs='cd ~/catkin_ws/src'
alias cm='cd ~/catkin_ws &amp;amp;&amp;amp; catkin_make'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 터미널창을 열면 자동으로 환경설정이 실행된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;(만약, 현재 터미널 창에 바로 반영을 하려면 아래와 같이 해보자)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;11-ros-환경설정-내용-분석bashrc&quot;&gt;1.1. ROS 환경설정 내용 분석(bashrc)&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Set ROS Kinetic&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /opt/ros/kinetic/setup.bash
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/catkin_ws/devel/setup.bash
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 두 코드는 환경설정을 불러오는 명령이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Set ROS Network&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROS_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.0.44
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROS_MASTER_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;ROS_HOSTNAME&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;:11311
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;ROS는 네트워크 통신 기반의 플랫폼이기 때문에 메세지 통신을 위해서 네트워크 설정은 반드시 선행되어야 합니다.&lt;/p&gt;

&lt;h5 id=&quot;12-단축-명령어-분석bashrc&quot;&gt;1.2. 단축 명령어 분석(bashrc)&lt;/h5&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Set ROS alias command&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cd ~/catkin_ws'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cd ~/catkin_ws/src'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;cs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cd ~/catkin_ws &amp;amp;&amp;amp; catkin_make'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;alias는 별명 혹은 숏컷 네이밍이라고 볼 수 있습니다. 따라서, 해당 키워드를 사용하면 =’‘에 들어있는 명령이 실행되는 거죠.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ROS 환경설정 확인 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ export | grep ROS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/ros/export_grep_ros.png&quot; width=&quot;60%&quot; height=&quot;60%&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="ROS" /><category term="installation" /><summary type="html">1. ROS 환경설정</summary></entry><entry><title type="html">01.ROS installation based from Ubuntu 16.04 Kinetic Kame</title><link href="http://localhost:4000/2019/12/05/ROS-01-ros-installation" rel="alternate" type="text/html" title="01.ROS installation based from Ubuntu 16.04 Kinetic Kame" /><published>2019-12-05T17:17:13+09:00</published><updated>2019-12-05T17:17:13+09:00</updated><id>http://localhost:4000/2019/12/05/ROS-01-ros-installation</id><content type="html" xml:base="http://localhost:4000/2019/12/05/ROS-01-ros-installation">&lt;p&gt;우분투 16.04 LTS버전에서 활용되는 ROS는 Kinectic Kame는 사실 우분투 16.04이기 때문에 설치되는 환경 종속적인 ROS 버전이다.&lt;/p&gt;

&lt;p&gt;물론 Ros.org에서 말하는 위키 내용은 다소 다른 감이 있지만, 통상적으로 이렇다고 본다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;ROS Kinetic Kame은 주로 Ubuntu 16.04 (Xenial) 릴리스를 대상으로하지만 Mac OS X, Android 및 Windows뿐만 아니라 다른 Linux 시스템도 다양한 정도로 지원됩니다. 다른 플랫폼과의 호환성에 대한 자세한 내용은 REP 3 : 대상 플랫폼을 참조하십시오. 또한 Ubuntu 15.10 Wily 및 Debian Jessie도 지원합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/kinetic_kame.png&quot; width=&quot;40%&quot; height=&quot;30%&quot; alt=&quot;Kinetic Kame&quot; /&gt;&lt;/p&gt;

&lt;p&gt;설치 과정은 사실 위키에 더 자세히 나와있지만, 추후 반복작업을 위해서 좀더 간략하게 정리해보자.&lt;/p&gt;

&lt;p&gt;참고로 여기서 다루지는 않지만, Ubuntu 18.04LTS 버전에서 활용하는 ROS Melodic Morenia는 이런 이미지를 쓰더라.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/Melodic_morenia.png&quot; width=&quot;40%&quot; height=&quot;30%&quot; alt=&quot;Melodic Morenia&quot; /&gt;&lt;/p&gt;

&lt;p&gt;우선 ROS 를 설치하기 전에 반드시 해야될 것은 Ubuntu 16.04를 설치를 해야 한다.&lt;/p&gt;

&lt;p&gt;이 과정이 참고로 굉장히 지랄같기 때문에 다시 정리가 필요할 듯 하다.&lt;/p&gt;

&lt;p&gt;추후에 다루도록 한다.&lt;/p&gt;

&lt;h3 id=&quot;1-설치하기&quot;&gt;1. 설치하기&lt;/h3&gt;

&lt;p&gt;ROS Kinetic은 데비안 패키지 용 Wily (Ubuntu 15.10), Xenial (Ubuntu 16.04) 및 Jessie (Debian 8)만 지원한다.&lt;/p&gt;

&lt;h4 id=&quot;11-우분투-리포지토리-구성하기뭔말인지-몰라-패스&quot;&gt;1.1. 우분투 리포지토리 구성하기(뭔말인지 몰라 패스)&lt;/h4&gt;

&lt;h4 id=&quot;12-sourcelist-셋업&quot;&gt;1.2. source.list 셋업&lt;/h4&gt;

&lt;p&gt;packages.ros.org의 소프트웨어를 허용하도록 컴퓨터를 설정하기&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo sh -c 'echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &amp;gt; /etc/apt/sources.list.d/ros-latest.list'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;13-key-값-설정하기&quot;&gt;1.3 Key 값 설정하기&lt;/h4&gt;

&lt;p&gt;키 서버 연결에 문제가있는 경우 이전 명령에서hkp : //pgp.mit.edu : 80또는hkp : //keyserver.ubuntu.com : 80을대체해라.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;또는 apt-key 명령 대신 curl을 사용하면 프록시 서버 뒤에있는 경우 유용 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -sSL 'http://keyserver.ubuntu.com/pks/lookup?op=get&amp;amp;search=0xC1CF6E31E6BADE8868B172B4F42ED6FBAB17C654' | sudo apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(단, curl을 사용하려면 curl을 ubuntu에 설치해야 한다.)&lt;/p&gt;

&lt;h4 id=&quot;14-installation&quot;&gt;1.4. Installation&lt;/h4&gt;

&lt;p&gt;먼저 우분투를 업데이트 하자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ROS에는 다양한 라이브러리와 도구가 있다. 시작을 위해 네 가지 기본 구성을 제공했다. ROS 패키지를 개별적으로 설치할 수도 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Desktop-Full Install: (Recommended)&lt;/strong&gt; : ROS, &lt;a href=&quot;http://wiki.ros.org/rqt&quot;&gt;rqt&lt;/a&gt;, &lt;a href=&quot;http://wiki.ros.org/rviz&quot;&gt;rviz&lt;/a&gt;, robot-generic libraries, 2D/3D simulators, navigation and 2D/3D perception&lt;/p&gt;

&lt;p&gt;이 것을 설치한다. 나머지는 참고로 알도록 하자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ros-kinetic-desktop-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Desktop Install:&lt;/strong&gt;ROS,&lt;a href=&quot;http://wiki.ros.org/rqt&quot;&gt;rqt&lt;/a&gt;,&lt;a href=&quot;http://wiki.ros.org/rviz&quot;&gt;rviz&lt;/a&gt;, and robot-generic libraries&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ros-kinetic-desktop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;ROS-Base: (Bare Bones)&lt;/strong&gt;ROS package, build, and communication libraries. No GUI tools.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ros-kinetic-ros-base
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Individual Package:&lt;/strong&gt;You can also install a specific ROS package (replace underscores with dashes of the package name)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ros-kinetic-PACKAGE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예시)&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ros-kinetic-slam-gmapping
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치하면 좀 시간이 걸린다.&lt;/p&gt;

&lt;p&gt;다 설치하고 나면 개발환경인 rqt도 설치를 하자.&lt;/p&gt;

&lt;h4 id=&quot;15-rosdep-초기화&quot;&gt;1.5. rosdep 초기화&lt;/h4&gt;

&lt;p&gt;ROS를 사용하기 전에 반드시 rosdep를 초기화 해야한다. rosdep은 ros의 핵심 컴포넌트들을 사용하거나 컴파일할 때 의존성 패키지를 쉽게 설치하여 사용자 편의성을 높여주는 기능이다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo rosdep init
$ rosdep update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;16-환경설정&quot;&gt;1.6. 환경설정&lt;/h4&gt;

&lt;p&gt;새로운 쉘이 실행될 때마다 ROS 환경 변수가 bash 세션에 자동으로 추가되는 것이 편리하다.&lt;/p&gt;

&lt;p&gt;ROS 배포가 둘 이상 설치되어있는 경우 ~ / .bashrc는 현재 사용중인 버전의 setup.bash 만 소싱해야한다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;source /opt/ros/kinetic/setup.bash&quot; &amp;gt;&amp;gt; ~/.bashrc
$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 명령 대신 현재 쉘의 환경을 변경하려면 다음을 입력하자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ source /opt/ros/kinetic/setup.bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;bash 대신 zsh를 사용하는 경우 다음 명령을 실행하여 쉘을 설정한다.(그냥 참고만)&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;source /opt/ros/kinetic/setup.zsh&quot; &amp;gt;&amp;gt; ~/.zshrc
$ source ~/.zshrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;17-패키지-빌드를-위한-의존성-설치&quot;&gt;1.7. 패키지 빌드를 위한 의존성 설치&lt;/h4&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt install python-rosinstall python-rosinstall-generator python-wstool build-essential
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;18-작업폴더-만들기&quot;&gt;1.8. 작업폴더 만들기&lt;/h4&gt;

&lt;p&gt;ROS는 catkin이라는 ROS 전용 빌드 시스템을 사용하고 있다. 이를 사용하려면 다음처럼 catkin작업 폴더를 생성하고 초기화 하는 작업이 필요하다. 이 설정은 작업 폴더를 새롭게 생성하지 않는 한 처음 한 번만 실행하면 된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ mkdir -p ~/catkin_ws/src
$ cd ~/catkin_ws/src
$ catkin_init_workspace
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;19-catkin-작업-폴더-빌드하기&quot;&gt;1.9. catkin 작업 폴더 빌드하기&lt;/h4&gt;

&lt;p&gt;현재 catkin 작업폴더에는 src 폴더와 그 안에 CMakeLists.txt 파일만 있지만, 시험삼아 catkin_make 명령어를 이용해 빌드해보자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/catkin_ws/
$ catkin_make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;20-빌드-결과-확인하기&quot;&gt;2.0. 빌드 결과 확인하기&lt;/h4&gt;

&lt;p&gt;문제 없이 빌드가 완료되면, ls 명령어를 통해서 생성된 폴더와 파일을 확인해보자. catkin 빌드 시스템의 빌드 관련 파일은 build 폴더에 저장되고 빌드 후 실행 관련 파일은 devel 폴더에 저장된다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ls
build
devel
src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;21-테스트-하기&quot;&gt;2.1. 테스트 하기&lt;/h4&gt;

&lt;p&gt;ROS의 모든 설치가 완료되었다. 제대로 설치가 되었는지 확인하자.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ roscore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="ROS" /><category term="installation" /><summary type="html">우분투 16.04 LTS버전에서 활용되는 ROS는 Kinectic Kame는 사실 우분투 16.04이기 때문에 설치되는 환경 종속적인 ROS 버전이다.</summary></entry></feed>