<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-12-28T16:15:57+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">로봇을 배우기 위한 지식 창고</title><subtitle>로봇을 배우기 위한 지식 창고</subtitle><author><name>Kiho Lee</name></author><entry><title type="html">04.C++ 객체 지향 개념 살펴보기</title><link href="http://localhost:4000/categories/c++/CPP-04-cpp-concept.html" rel="alternate" type="text/html" title="04.C++ 객체 지향 개념 살펴보기" /><published>2019-12-28T00:00:00+00:00</published><updated>2019-12-28T00:00:00+00:00</updated><id>http://localhost:4000/categories/c++/CPP-04-cpp-concept</id><content type="html" xml:base="http://localhost:4000/categories/c++/CPP-04-cpp-concept.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-객체-지향이란&quot;&gt;1. 객체 지향이란?&lt;/h2&gt;

&lt;p&gt;객체 지향이란 인간의 기준으로 일어나는 생활의 개념을 많이 차용한 프로그래밍 설계 기법이라고 볼 수 있다.
C++에서 객체지향은&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;객체(object): 객체란, 실세계에서 정의할 수 있는 모던 형태이며, ‘속성(data)’과 ‘기능(action)’을 포함한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;사실 이렇게 말하면 아무도 객체를 이해할 수 없을 것 같다.&lt;/p&gt;

&lt;p&gt;그래서 가상의 인물을 통해서 객체의 개념을 이해해보자&lt;/p&gt;

&lt;h2 id=&quot;2-객체-지향-개념화&quot;&gt;2. 객체 지향 개념화&lt;/h2&gt;

&lt;p&gt;우리는 이제부터 한 가족의 생활을 객체 지향 개념으로 변화시켜볼 예정이다.&lt;/p&gt;

&lt;p&gt;민수: 84년 생이며, 한 가족의 가장이고, 남자이다. 직업은 엔지니어이고, 직급은 차장이다. 취미는 프라모델 제작이고, 영화감상, 독서이다. 일주일에 3번 정도 헬스장에 간다.
성격은 꾸준하고, 적극적이며, 호기심이 많아 다양한 기술 분야에 관심을 갖고 있다.&lt;/p&gt;

&lt;p&gt;영애: 86년 생이며, 한 가족의 아내이며, 여자이다. 직업은 사업가이다. 취미는 유투브 보기와 산책, 여행이다. 일주일에 2번 이상 자전거 타기 운동을 한다. 성격은 여유로우며, 근면하고, 꼼꼼하고, 호기심과 모험심이 많다. 쇼핑하는 것을 좋아하여, 이마트나 노브랜드에 자주간다. 한 번 가면 쇼핑카트에 물건을 가득 담는다.&lt;/p&gt;

&lt;p&gt;영호: 2017년 생이며, 민수와 영애의 아들이다. 성격은 영애를 닮았고, 재능은 민수를 닮았다.&lt;/p&gt;

&lt;h3 id=&quot;21-객체의-구분&quot;&gt;2.1 객체의 구분&lt;/h3&gt;

&lt;p&gt;위에서 예시를 통해 우리는 객체를 기본적으로 민수, 영애, 영호 3개로 만들 수 있다. 또한, 프로그래머 관점에 따라 추가적으로 더 많은 대상을 객체화 시킬 수 있다.&lt;/p&gt;

&lt;h3 id=&quot;22-속성과-기능-구분&quot;&gt;2.2 속성과 기능 구분&lt;/h3&gt;

&lt;p&gt;객체를 구분했으니 이제 객체마다 속성과 기능을 찾아야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;속성이란? 객체가 가진 상태 또는 특징을 말한다. 기능은 객체가 할 수 있는 행동을 의미한다.&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;자동차를 객체로 보면, 
속성: 바퀴, 엔진 상태, 배기량
기능: 달린다, 멈춘다 등
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;3-adtabstract-data-type-객체-지향-모델링&quot;&gt;3. ADT(Abstract Data Type) 객체 지향 모델링&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;객체이름&lt;/th&gt;
      &lt;th&gt;속성&lt;/th&gt;
      &lt;th&gt;기능&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;민수&lt;/td&gt;
      &lt;td&gt;이름:민수&lt;/td&gt;
      &lt;td&gt;먹기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;생년:84년&lt;/td&gt;
      &lt;td&gt;잠자기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성별:남자&lt;/td&gt;
      &lt;td&gt;운전하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;직업:엔지니어&lt;/td&gt;
      &lt;td&gt;일하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;직급:차장&lt;/td&gt;
      &lt;td&gt;만들기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;결혼여부:Y&lt;/td&gt;
      &lt;td&gt;탐구하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;배우자:영애&lt;/td&gt;
      &lt;td&gt;영화보기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격1:근면한&lt;/td&gt;
      &lt;td&gt;책보기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격2:적극적인&lt;/td&gt;
      &lt;td&gt;운동하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격3:호기심 많은&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;영애&lt;/td&gt;
      &lt;td&gt;이름:영애&lt;/td&gt;
      &lt;td&gt;먹기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;생년:86년&lt;/td&gt;
      &lt;td&gt;잠자기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성별:여자&lt;/td&gt;
      &lt;td&gt;운전하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;직업:사업가&lt;/td&gt;
      &lt;td&gt;일하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;직급:사장&lt;/td&gt;
      &lt;td&gt;여행하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;결혼여부:Y&lt;/td&gt;
      &lt;td&gt;유투브보기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;배우자:민수&lt;/td&gt;
      &lt;td&gt;책보기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격1:근면한&lt;/td&gt;
      &lt;td&gt;운동하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격2:여유로운&lt;/td&gt;
      &lt;td&gt;쇼핑하기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격3:호기심 많은&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;성격4:모험심 많은&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;영호&lt;/td&gt;
      &lt;td&gt;이름:영호&lt;/td&gt;
      &lt;td&gt;민수 기능상속&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;생년:2017년&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;쇼핑카트&lt;/td&gt;
      &lt;td&gt;제품명&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;가격&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;프로모션&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;ADT란 무엇인가? 
객체와 속성, 기능을 도출하는 과정을 모델링이라하고, 이를 추상화하여 설계하는 과정을 ADT(Abstract Data Type)라 부른다.
이 과정이 마무리되면 C++의 헤더파일이 산출물로 나온다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;상위수준의 명세서이므로 코드를 이해하기 쉽다.&lt;/li&gt;
  &lt;li&gt;구현 전에 충분히 검증할 수 있으며 쉽게 변경할 수 있다.&lt;/li&gt;
  &lt;li&gt;추상적인 기술이므로 다른 프로젝트에 재사용 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-네임스페이스namespace&quot;&gt;4. 네임스페이스(namespace)&lt;/h2&gt;

&lt;p&gt;네임스페이스는 이름공간으로 해석하는 경우가 많은데, 이는 정말 의미없는 해석이라 생각한다. 사람으로 본다면, 가문으로 볼 수 있고, &lt;code class=&quot;highlighter-rouge&quot;&gt;객체들의 카테고리 구분&lt;/code&gt; 정도로 해석할 수 있을 것 같다.
이를 사용하여, 다양한 변수나 함수의 이름을 통일하여 사용할 수 있고 네임스페이스로 구분 할 수 있게 된다. (유지보수가 좋아 질 수 있음)&lt;/p&gt;

&lt;p&gt;네임스페이스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;::&lt;/code&gt; 범위 지정자라는 것을 통해서 표현하게 된다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;네임스페이스&lt;/th&gt;
      &lt;th&gt;객체&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;집(기본)&lt;/td&gt;
      &lt;td&gt;민수&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;영애&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;영호&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;마트&lt;/td&gt;
      &lt;td&gt;쇼핑카트&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;5-객체-지향-프로그램-예시&quot;&gt;5. 객체 지향 프로그램 예시&lt;/h2&gt;

&lt;p&gt;실제 삶 속에 예시를 통해 객체 지향의 의미를 되세겨보자&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;민수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;먹기&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;레스토랑&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;스파게티&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;영애&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;먹기&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;레스토랑&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;스테이크&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;민수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;운전하기&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;영애&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;집&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;4.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;민수&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;자기&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;5.&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;영애&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;자기&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="C++" /><category term="객체지향" /><summary type="html"></summary></entry><entry><title type="html">05.C++ 네임스페이스(namespace) 사용하기</title><link href="http://localhost:4000/categories/c++/CPP-05-cpp-namespace.html" rel="alternate" type="text/html" title="05.C++ 네임스페이스(namespace) 사용하기" /><published>2019-12-28T00:00:00+00:00</published><updated>2019-12-28T00:00:00+00:00</updated><id>http://localhost:4000/categories/c++/CPP-05-cpp-namespace</id><content type="html" xml:base="http://localhost:4000/categories/c++/CPP-05-cpp-namespace.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-네임스페이스&quot;&gt;1. 네임스페이스&lt;/h2&gt;

&lt;p&gt;C++에서 가장 먼저 접하게 되는 개념이 바로 네임스페이스다. 
처음 Hello Wordl를 출력할 때, 의미도 모른채 &lt;code class=&quot;highlighter-rouge&quot;&gt;using namespace std&lt;/code&gt;를 쓴 기억이 있을 것이다.&lt;/p&gt;

&lt;p&gt;네임스페이스는 단어 그래도 지정한 라이브러리를 사용할 수 있도록 소속을 알리는 역할을 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이렇게 사용하게 되면, std라는 라이브러리가 더 이상 소속과 기능을 같이 쓰지 않아도 된다. 이게 무슨말이냐하면,&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;//일반적을 namespace를 선언 안한 경우&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Wolrd&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;2-네임스페이스-범위-지정에-따른-차이비교&quot;&gt;2. 네임스페이스 범위 지정에 따른 차이비교&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;using namespace std 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//숫자 키보드 입력받기&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//입력 받은 숫자를 화면에 출력하기&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;using namespace std의 부분을 설정한 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//cout으로 범위를 좁혀서 namespace 지정&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//컴파일 오류 발생&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//정상적으로 실행 가능한 코드&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//입력 받은 숫자를 화면에 출력하기&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;두 코드에서 알 수 있듯이, namespace는 범위를 지정해서 사용할 수 있고, 범위를 지정하면 다른 라이브러리의 다른 기능을 사용할 때 선별적으로 접근 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;3-namespace-직접-정의&quot;&gt;3. namespace 직접 정의&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;namespace 네임스페이스명
{
    선언 내용:(클래스, 함수, 변수 등을 정의)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이와 같은 방식으로 namespace를 지정 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;변수를 사용한 네임스페이스 설정&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//first 네임스페이스 정의&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//second 네임스페이스 정의&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1을 출력&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2를 출력&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="C++" /><category term="네임스페이스" /><category term="namespace" /><summary type="html"></summary></entry><entry><title type="html">06.C++ 파일 입출력</title><link href="http://localhost:4000/categories/c++/CPP-06-cpp-file-io.html" rel="alternate" type="text/html" title="06.C++ 파일 입출력" /><published>2019-12-28T00:00:00+00:00</published><updated>2019-12-28T00:00:00+00:00</updated><id>http://localhost:4000/categories/c++/CPP-06-cpp-file-io</id><content type="html" xml:base="http://localhost:4000/categories/c++/CPP-06-cpp-file-io.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-파일-입출력&quot;&gt;1. 파일 입출력&lt;/h2&gt;

&lt;p&gt;파일 입출력은 말 그대로, 파일 형태로 데이터를 입출력 하는 라이브러리를 사용하는 방법을 살펴본다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;필요한 라이브러리 헤더 fstream(파일클래스)&lt;/li&gt;
  &lt;li&gt;네임스페이스 std(표준 라이브러리)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;fstream&amp;gt;
#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;안녕하세요.글자를써봅시다.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ofstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//file.txt 파일을 연다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// file.txt 파일에 str 문자열을 쓴다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//file.txt를 닫는다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ifstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ifs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//file.txt 파일을 다시열고,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ifs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//파일의 내용을 str에 저장한다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;(읽어옴.)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;이 코드를 실행하면, file.txt 파일이 프로젝트 폴더에 생성되고, 결과는 다음과 같이 나온다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;안녕하세요.글자를써봅니다.(읽어옴.)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하지만, 주의할 점은 띄어쓰기를 하면 이상하게 출력될 수 있다는 점을 확인하기 바란다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;출력 : ofstream → fstream(ios::out);
입력 : ifstream → fstream(ios::in);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;파일 모드 표&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;파일 모드&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ios::in&lt;/td&gt;
      &lt;td&gt;파일 읽기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ios::out&lt;/td&gt;
      &lt;td&gt;파일 쓰기&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ios::app&lt;/td&gt;
      &lt;td&gt;파일에 이어쓰기(마지막 줄부터)&lt;br /&gt;예)fstream(ios::app)와 같이 ios::out과 함께 써야 함.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ios::trunc&lt;/td&gt;
      &lt;td&gt;파일이 이미 있으면, 삭제하고 새로 파일 작성&lt;br /&gt;예) 파일 읽을 때: fstream(ios::in|ios::trunc)&lt;br /&gt;예) 파일 쓸 때:fstream(ios::out|ios::trunc)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ios::binary&lt;/td&gt;
      &lt;td&gt;이진 파일 처리&lt;br /&gt;예) 파일 읽을 때: fstream(ios::in|ios::binary)&lt;br /&gt;예) 파일 쓸 때: fstream(ios::out|ios::binary)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/&quot; title=&quot;&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;fstream&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ofstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//file.txt 파일을 연다.(없으면 생성)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;file.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//&quot;This is an apple&quot; 문자열을 쓴다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This is an apple&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//tellp() 멤버함수를 이용해서 파일의 현재 위치를 얻는다.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// 현재위치는 This is an apple의 맨 끝일 것이다.&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tellp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//현재 위치에서 7만큼 위치를 뒤로 이동시킨다.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//현재 위치를 앞뒤로 조정하는 것을 오프셋(offset)을 조정한다고 한다.&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;//오프셋 -7로 조정한 위치는 문자 'n'이다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seekp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//조정한 위치부터 문자열 &quot;sam&quot; 을 쓴다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; sam&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;//파일을 닫는다.&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;ofs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="C++" /><category term="file" /><category term="IO" /><summary type="html"></summary></entry><entry><title type="html">07.C++ 변수와 자료형</title><link href="http://localhost:4000/categories/c++/CPP-07-cpp-variables.html" rel="alternate" type="text/html" title="07.C++ 변수와 자료형" /><published>2019-12-28T00:00:00+00:00</published><updated>2019-12-28T00:00:00+00:00</updated><id>http://localhost:4000/categories/c++/CPP-07-cpp-variables</id><content type="html" xml:base="http://localhost:4000/categories/c++/CPP-07-cpp-variables.html">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-변수-설정&quot;&gt;1. 변수 설정&lt;/h2&gt;

&lt;p&gt;다양한 프로그램에서 변수는 필수적인 요소이다. 따라서, 그 의미는 설명할 필요가 없을 듯 하다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int variable = 10;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;variable라는 변수에 10이라는 상수를 저장하는 것을 볼 수 있다.&lt;/p&gt;

&lt;p&gt;변수를 설정하는 데 다음과 같은 몇 가지 유의사항이 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;의미를 파악할 수 있도록 식별할 수 있는 단어로 구성(가장중요)&lt;/li&gt;
  &lt;li&gt;일반적으로 소문자로 구성&lt;/li&gt;
  &lt;li&gt;클래스 이름은 일반적으로 대문자로 시작&lt;/li&gt;
  &lt;li&gt;숫자는 변수의 이름의 첫 글자로 사용할 수 없음&lt;/li&gt;
  &lt;li&gt;여러단어를 조합할 때는 일관성 있는 규칙을 적용할 것(예 student_score)&lt;/li&gt;
  &lt;li&gt;예약어는 변수의 이름으로 사용할 수 없다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-c-예약어&quot;&gt;2. C++ 예약어&lt;/h2&gt;

&lt;p&gt;C++에서는 다음과 같은 예약어를 활용한다.&lt;/p&gt;

&lt;p&gt;[그림]&lt;/p&gt;

&lt;h2 id=&quot;3-c-기본-자료형&quot;&gt;3. C++ 기본 자료형&lt;/h2&gt;

&lt;p&gt;C++에서는 다음 기본 자료형을 활용한다.&lt;/p&gt;

&lt;p&gt;[그림]&lt;/p&gt;

&lt;h2 id=&quot;3-singed와-unsinged-타입&quot;&gt;3. singed와 unsinged 타입&lt;/h2&gt;

&lt;p&gt;기본 자료형 중 숫자형 자료형은 다음과 같이 signed와 unsigned 타입을 갖게 된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;long형의 (signed) 표현범위 : -2,147,483,648 ~ 2,147,483,648
long형의 unsinged 표현범위 : 0 ~ 4,294,967,295
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-자료형-별칭-만들기&quot;&gt;4. 자료형 별칭 만들기&lt;/h2&gt;

&lt;p&gt;자료형에 의미있는 별칭(alias)를 모던 C++에서부터 가능해졌다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. typedef [기존 자료형] [별칭]
예) typedef double salary;
2. using [별칭] = [기존 자료형]; //C++11 표준 방식
예) using salary = double;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//double형에 salary라는 별칭을 선언&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// int형에 point라는 별칭 선언&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//kiho 변수를 salary형으로 선언하고 값 할당&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kiho&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;125&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//wonbin 변수를 salary형으로 선언하고 값 할당&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;salary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wonbin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;5-auto형-변수-초깃값-필요&quot;&gt;5. auto형 변수: 초깃값 필요&lt;/h2&gt;

&lt;p&gt;모던 C++11 부터 새롭게 적용된 타입이 중에 특이한 것이 바로 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto&lt;/code&gt; 타입이다. 
기존에는 데이터 타입을 정해서 메모리를 할당하고, 컴파일의 구분기준으로 활용하였으나, 
auto가 나오면서 이러한 방식을 자동으로 처리해주는 기능이 등장하게 되었다. 일종의 javascript에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;var name&lt;/code&gt;이라고 쓰고, 데이터를 할당해준 것과 다르지 않은 느낌이다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto 변수명 = 초깃값(상수, 변수, 함수 모두 가능);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;6-decltype형-초깃값-불필요&quot;&gt;6. decltype형: 초깃값 불필요&lt;/h2&gt;

&lt;p&gt;모던 C++부터 지원하는 또 다른 타입은 decltype이다. auto형의 초깃값 불필요 버전이라고 볼 수 있을 것 같다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. decltype(함수 f()) [선언할 변수];
2. decltype(변수) [선언할 변수];
3. decltype((변수)) [선언할 변수];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;231&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//1 번 내용&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//2 번 내용&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;decltype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//3 번 내용&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="C++" /><category term="variables" /><category term="types" /><summary type="html"></summary></entry><entry><title type="html">12.ROS 파일 시스템</title><link href="http://localhost:4000/categories/ros/ROS-12-file-system.html" rel="alternate" type="text/html" title="12.ROS 파일 시스템" /><published>2019-12-17T00:00:00+00:00</published><updated>2019-12-17T00:00:00+00:00</updated><id>http://localhost:4000/categories/ros/ROS-12-file-system</id><content type="html" xml:base="http://localhost:4000/categories/ros/ROS-12-file-system.html">&lt;h2 id=&quot;1-파일-구성&quot;&gt;1. 파일 구성&lt;/h2&gt;

&lt;p&gt;ROS에서 소프트웨어 구성을 위한 기본 단위는 패키지(package)로써 ROS의 응용프로그램은 패키지 단위로 개발된다.&lt;/p&gt;

&lt;p&gt;각 패키지에는 이름, 작성자, 라이센스 및 종속 패키지를 포함하여 패키지에 대한 정보가 들어있는 XML 파일인 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.xml&lt;/code&gt;이 포함되어 있다. 또한, ROS 빌드 시스템 인 Catkin은  CMake를 이용하고 있어서 패키지 폴더의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;를 사용하여 빌드 환경을 설명한다. 그리고 패키지는 노드의 소스 코드와 노드 간의 메시지 통신을 위한 메시지 파일로 구성된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ROS 패키지를 설치하는 방법에는 두 가지가 있다. 첫 번째는 빌드 프로세스없이 즉시 실행할 수 있는 바이너리 형식으로 제공된 패키지를 설치하는 것이다. 두 번째는 사용자가 패키지의 소스 코드를 다운로드하여 설치하기 전에 빌드하는 것이다. 패키지를 수정하거나 소스 코드의 내용을 확인하려면 두 번째 설치 방법을 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;다음은 TurtleBot3 패키지의 예이며 두 가지 설치 방법의 차이점을 설명한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;바이너리 설치 방법
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ sudo apt-get install ros-kinetic-turtlebot3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;소스코드 설치 방법
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cd ~/catkin_ws/src
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3.git
$ git clone https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git
$ cd ~/catkin_ws/
$ catkin_make
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-설치-폴더&quot;&gt;2. 설치 폴더&lt;/h2&gt;

&lt;p&gt;ROS는 다음과 같은 폴더에 설치를 하게 된다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;opt/ros/[버전이름]&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;kinetic kame 버전은 ‘/opt/ros/kinetic’&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 및 파일 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ros_install_folder_configuration.png&quot; title=&quot;ROS 디렉토리 및 파일 구성 &quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 특징&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;/bin        - 실행 가능한 바이너리 파일&lt;/li&gt;
  &lt;li&gt;/etc        - ROS 및 catkin 관련 설정 파일&lt;/li&gt;
  &lt;li&gt;/include    - 헤더 파일&lt;/li&gt;
  &lt;li&gt;/lib        - 라이브러리 파일&lt;/li&gt;
  &lt;li&gt;/share      - ROS 패키지&lt;/li&gt;
  &lt;li&gt;env.*       - 환경설정 파일&lt;/li&gt;
  &lt;li&gt;setup.*     - 환경설정 파일&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-작업-폴더&quot;&gt;3. 작업 폴더&lt;/h2&gt;

&lt;p&gt;대부분의 프로그램이나 프레임워크에서 그렇듯이 작업폴더는 사용자가 원하는 곳에 생성이 가능하다. 하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;~/catkin_ws/&lt;/code&gt;를 작업폴더로 지정하고 ROS를 작성하도록 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;작업폴더 경로 : &lt;code class=&quot;highlighter-rouge&quot;&gt;home/memaker/catkin_ws/&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 및 파일 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ros_workspace_folder_configuration.png&quot; title=&quot;ROS workspace 디렉토리 및 파일 구성 &quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 특징&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;작업 폴더는 사용자가 작성한 패키지와 공개된 다른 개발자의 패키지를 저장하고 빌드하는 공간을 활용된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;/build   - 빌드 관련 파일&lt;/li&gt;
  &lt;li&gt;/devel   - msg, srv 헤더파일 과 사용자 패키지 라이브러리, 실행 파일&lt;/li&gt;
  &lt;li&gt;/src     - 사용자 패키지&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-사용자-패키지&quot;&gt;4. 사용자 패키지&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/catkin_ws/src&lt;/code&gt;폴더는 사용자 소스 코드를위한 공간이다. 이 폴더에서 다른 개발자가 개발한 자체 ROS 패키지 또는 패키지를 저장하고 빌드할 수 있다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 및 파일 구성&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ros_user_package_folder_configuration.png&quot; title=&quot;ROS 사용자 패키지 디렉토리 및 파일 구성 &quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;디렉토리 특징&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;/include         - 헤더파일&lt;/li&gt;
  &lt;li&gt;/launch          - roslaunch에 사용되는 launch 파일&lt;/li&gt;
  &lt;li&gt;/node            - rospy용 스크립터&lt;/li&gt;
  &lt;li&gt;/msg             - 메시지 파일&lt;/li&gt;
  &lt;li&gt;/src             - 소스코드 파일&lt;/li&gt;
  &lt;li&gt;/srv             - 서비스 파일&lt;/li&gt;
  &lt;li&gt;CMakeLists.txt   - 빌드 설정 파일&lt;/li&gt;
  &lt;li&gt;Package.xml      - 패키지 설정 파일&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;출처:[ROS_Robot_Programming_EN]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="ROS" /><category term="파일시스템" /><summary type="html">1. 파일 구성</summary></entry><entry><title type="html">13.ROS 빌드 시스템</title><link href="http://localhost:4000/categories/ros/ROS-13-build-system.html" rel="alternate" type="text/html" title="13.ROS 빌드 시스템" /><published>2019-12-17T00:00:00+00:00</published><updated>2019-12-17T00:00:00+00:00</updated><id>http://localhost:4000/categories/ros/ROS-13-build-system</id><content type="html" xml:base="http://localhost:4000/categories/ros/ROS-13-build-system.html">&lt;h2 id=&quot;1-들어가며&quot;&gt;1. 들어가며&lt;/h2&gt;

&lt;p&gt;ROS 빌드 시스템은 기본적으로 CMake(Cross Platform Make)를 사용하며, 빌드 환경은 패키지 폴더의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;파일에 설명되어 있다.&lt;/p&gt;

&lt;p&gt;ROS에서 CMake를 사용하는 이유는 여러 플랫폼에서 ROS 패키지를 빌드 할 수 있기 때문이다.&lt;/p&gt;

&lt;h2 id=&quot;2-패키지-만들기&quot;&gt;2. 패키지 만들기&lt;/h2&gt;

&lt;p&gt;다음과 같은 명령어를 통해 패키지를 생성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ catkin_create_pkg [PACKAGE_NAME] [DEPENDENT_PACKAGE_1] [DEPENDENT_PACKAGE_N]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;catkin_create_pkg&lt;/code&gt;명령은 Cake빌드 시스템에 필요한 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;및 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.xml&lt;/code&gt;파일이 포함 된 패키지 폴더를 만든다.&lt;/p&gt;

&lt;p&gt;다음과 같이 입력하고, 실행하면, 패키지를 생성할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cs
~/catkin_ws/src$ 
~/catkin_ws/src$ catkin_create_pkg my_first_ros_pkg std_msgs roscpp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;만들 패키지 이름은‘my_first_ros_pkg’이다. ROS의 패키지 이름은 모두 소문자 여야하며 공백을 포함해서는 안된다. 이름 지정 지침에서는 대시(-) 또는 공백 대신 각 단어 사이에 &lt;strong&gt;밑줄(_)&lt;/strong&gt;을 사용한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;std_msgs&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;roscpp&lt;/code&gt;는 이전에 선택적 종속 패키지로 추가되었다.
명령. 즉, ROS의 표준 메시지 패키지 인 &lt;code class=&quot;highlighter-rouge&quot;&gt;std_msgs&lt;/code&gt;와 ROS에서 C/C++를 사용하는 데 필요한 클라이언트 라이브러리 인 &lt;code class=&quot;highlighter-rouge&quot;&gt;roscpp&lt;/code&gt;가 패키지를 작성하기 전에 설치되어 있어야한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/catkin_ws/src$ cd my_first_ros_pkg
~/catkin_ws/src$ ls
include 			 → Include Folder
src 				 → Source Code Folder
CMakeLists.txt 		 → Build Configuration File
package.xml 		 → Package Configuration File
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ros_my_first_package.png&quot; title=&quot;ROS 패키지 생성 &quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-패키지-내용-살펴보기&quot;&gt;3. 패키지 내용 살펴보기&lt;/h2&gt;

&lt;p&gt;ROS의 필수 설정 파일 중 하나인 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.xml&lt;/code&gt;은 패키지의 정보를 담는 XML 파일로 패키지의 이름, 저작자, 라이센스, 의존성 패키지 등을 기술하고 있다.&lt;/p&gt;

&lt;p&gt;다음은 생성된 &lt;code class=&quot;highlighter-rouge&quot;&gt;package.xml&lt;/code&gt;파일을 그대로 가져온 내용이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;package&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;format=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;my_first_ros_pkg&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;The my_first_ros_pkg package&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- One maintainer tag required, multiple allowed, one person per tag --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Example:  --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;maintainer email=&quot;jane.doe@example.com&quot;&amp;gt;Jane Doe&amp;lt;/maintainer&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;maintainer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;memaker@todo.todo&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;memaker&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maintainer&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- One license tag required, multiple allowed, one license per tag --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Commonly used license strings: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   BSD, MIT, Boost Software License, GPLv2, GPLv3, LGPLv2.1, LGPLv3 --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;license&amp;gt;&lt;/span&gt;TODO&lt;span class=&quot;nt&quot;&gt;&amp;lt;/license&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Url tags are optional, but multiple are allowed, one per tag --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Optional attribute type can be: website, bugtracker, or repository --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Example: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;url type=&quot;website&quot;&amp;gt;http://wiki.ros.org/my_first_ros_pkg&amp;lt;/url&amp;gt; --&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Author tags are optional, multiple are allowed, one per tag --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Authors do not have to be maintainers, but could be --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Example: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;author email=&quot;jane.doe@example.com&quot;&amp;gt;Jane Doe&amp;lt;/author&amp;gt; --&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- The *depend tags are used to specify dependencies --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Dependencies can be catkin packages or system dependencies --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Examples: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use depend as a shortcut for packages that are both build and exec dependencies --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;depend&amp;gt;roscpp&amp;lt;/depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   Note that this is equivalent to the following: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;build_depend&amp;gt;roscpp&amp;lt;/build_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;exec_depend&amp;gt;roscpp&amp;lt;/exec_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use build_depend for packages you need at compile time: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;build_depend&amp;gt;message_generation&amp;lt;/build_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use build_export_depend for packages you need in order to build against this package: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;build_export_depend&amp;gt;message_generation&amp;lt;/build_export_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use buildtool_depend for build tool packages: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;buildtool_depend&amp;gt;catkin&amp;lt;/buildtool_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use exec_depend for packages you need at runtime: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;exec_depend&amp;gt;message_runtime&amp;lt;/exec_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use test_depend for packages you need only for testing: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;test_depend&amp;gt;gtest&amp;lt;/test_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Use doc_depend for packages you need only for building documentation: --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!--   &amp;lt;doc_depend&amp;gt;doxygen&amp;lt;/doc_depend&amp;gt; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;buildtool_depend&amp;gt;&lt;/span&gt;catkin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/buildtool_depend&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build_depend&amp;gt;&lt;/span&gt;roscpp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build_depend&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build_depend&amp;gt;&lt;/span&gt;std_msgs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build_depend&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build_export_depend&amp;gt;&lt;/span&gt;roscpp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build_export_depend&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;build_export_depend&amp;gt;&lt;/span&gt;std_msgs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build_export_depend&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;exec_depend&amp;gt;&lt;/span&gt;roscpp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exec_depend&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;exec_depend&amp;gt;&lt;/span&gt;std_msgs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/exec_depend&amp;gt;&lt;/span&gt;


  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- The export tag contains other, unspecified, tags --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;export&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Other tools can request additional information be placed here --&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/export&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/package&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;?xml&amp;gt;&lt;/code&gt;                - 문서 문법을 정의하는 문구로 아래의 내용은 xml 버전 1.0을 따르고 있다는 것을 표시한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;package&amp;gt;&lt;/code&gt;             - 이 구문부터 맨 끝의 &amp;lt;/package&amp;gt; 까지가 ROS 패키지 설정 부분이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;name&amp;gt;&lt;/code&gt;                - 패키지의 이름이다. 패키지를 생성할 때 입력한 패키지의 이름이 사용된다. 다른 옵션도 마찬가지지만 이는 사용자가 원할 때 언제든지 바꿀 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt;             - 패키지의 버전이다. 역시 자유롭게 변경 가능하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;description&amp;gt;&lt;/code&gt;         - 패키지의 간단한 설명을 기술 할 수 있다. 보통 2~3 무장으로 기술하고 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;maintainer&amp;gt;&lt;/code&gt;          - 패키지의 관리자의 이름과 메일 주소를 작성한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;license&amp;gt;&lt;/code&gt;             - 라이선스를 작성한다. BSD, MIT, Apache, GPLv3, LGPLv3 등을 기재하면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;url&amp;gt;&lt;/code&gt;                 - 패키지를 설명하는 웹 페이지 또는 버그 관리, 저장소 등의 주소를 기재한다. 이 종류에 따라 type에 website, bugtracker, repository를 대입하면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;author&amp;gt;&lt;/code&gt;              - 패키지 개발에 참여한 개발자의 이름과 이메일 주소를 적는다. 복수의 개발자가 참여한 경우에는 바로 다음줄에 &amp;lt;autor&amp;gt; 태그를 이용하여 추가하면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;buildtool_depend&amp;gt;&lt;/code&gt;    - 빌드 시스템의 의존성을 기술한다. 지금은 Catkin build system을 이용하고 있으므로 &lt;code class=&quot;highlighter-rouge&quot;&gt;catkin&lt;/code&gt;을 입력한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;build_depend&amp;gt;&lt;/code&gt;        - 패키지를 빌드할 때 의존하는 패키지의 이름을 적는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;run_depend&amp;gt;&lt;/code&gt;          - 패키지를 실행할 때 의존하는 패키지의 이름을 적는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;test_depend&amp;gt;&lt;/code&gt;         - 패키지를 테스트할 때 의존하는 패키지의 이름을 적는다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;export&amp;gt;&lt;/code&gt;              - ROS에서 명시하지 않는 태그명을 사용할 때 쓰인다. 제일 널리 쓰이는 것은 메타패키지일 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;export&amp;gt;&amp;lt;metapackage/&amp;gt;&amp;lt;/export&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;metapackage&amp;gt;&lt;/code&gt;         - export 태그 안에서 사용하는 공식적인 태그로 현재의 패키지가 메타패키지면 이를 선언한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;직접 커스터마이징 하면 아래와 같이 기술 할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;package&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;my_first_ros_pkg&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.0.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;The my_first_ros_pkg package&lt;span class=&quot;nt&quot;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;license&amp;gt;&lt;/span&gt;Apache License 2.0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/license&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;author&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsirikh@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Kiho Lee&lt;span class=&quot;nt&quot;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;maintainer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;email=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lsirikh@gmail.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Kiho Lee&lt;span class=&quot;nt&quot;&gt;&amp;lt;/maintainer&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bugtracker&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;repository&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;url&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;website&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;https://lsirikh.github.io&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;buildtool_depend&amp;gt;&lt;/span&gt;catkin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/buildtool_depend&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;build_depend&amp;gt;&lt;/span&gt;std_msgs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build_depend&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;build_depend&amp;gt;&lt;/span&gt;roscpp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/build_depend&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;run_depend&amp;gt;&lt;/span&gt;std_msgs&lt;span class=&quot;nt&quot;&gt;&amp;lt;/run_depend&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;run_depend&amp;gt;&lt;/span&gt;roscpp&lt;span class=&quot;nt&quot;&gt;&amp;lt;/run_depend&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;export&amp;gt;&amp;lt;/export&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/package&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;4-빌드-설정-파일cmakeliststxt-수정&quot;&gt;4. 빌드 설정 파일(CMakeLists.txt) 수정&lt;/h2&gt;

&lt;p&gt;ROS의 빌드 시스템인 Catkin은 기본적으로 CMake를 이용하고 있어서 패키지의 폴더의 &lt;code class=&quot;highlighter-rouge&quot;&gt;CMakeLists.txt&lt;/code&gt;라는 파일에 빌드 환경을 기술하고 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cmake_minimum_required(VERSION 2.8.3)
project(my_first_ros_pkg)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
  std_msgs
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for &quot;message_generation&quot;
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for &quot;message_runtime&quot;
## * In this file (CMakeLists.txt):
##   * add &quot;message_generation&quot; and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add &quot;message_runtime&quot; and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
# add_message_files(
#   FILES
#   Message1.msg
#   Message2.msg
# )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
# generate_messages(
#   DEPENDENCIES
#   std_msgs
# )

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for &quot;dynamic_reconfigure&quot;
## * In this file (CMakeLists.txt):
##   * add &quot;dynamic_reconfigure&quot; to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the &quot;generate_dynamic_reconfigure_options&quot; section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES my_first_ros_pkg
#  CATKIN_DEPENDS roscpp std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/my_first_ros_pkg.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/my_first_ros_pkg_node.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. &quot;rosrun someones_pkg node&quot; instead of &quot;rosrun someones_pkg someones_pkg_node&quot;
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX &quot;&quot;)

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN &quot;*.h&quot;
#   PATTERN &quot;.svn&quot; EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_my_first_ros_pkg.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 하나씩 분석을 해보도록 하자.&lt;/p&gt;

&lt;p&gt;출처:[ROS_Robot_Programming_EN]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="ROS" /><category term="빌드시스템" /><summary type="html">1. 들어가며</summary></entry><entry><title type="html">10.ROS 좌표변환(TF-Transform)</title><link href="http://localhost:4000/categories/ros/ROS-10-TF.html" rel="alternate" type="text/html" title="10.ROS 좌표변환(TF-Transform)" /><published>2019-12-16T00:00:00+00:00</published><updated>2019-12-16T00:00:00+00:00</updated><id>http://localhost:4000/categories/ros/ROS-10-TF</id><content type="html" xml:base="http://localhost:4000/categories/ros/ROS-10-TF.html">&lt;h2 id=&quot;1-좌표-변환tf란&quot;&gt;1. 좌표 변환(TF)란?&lt;/h2&gt;

&lt;p&gt;로봇의 팔 자세를 설명 할 때 각 관절의 상대 좌표 변환으로 설명 할 수 있다.
로봇이 걷고있을 때, 로봇 손의 좌표는 각각의 상관 된 관절의 상대 좌표 변환에 따라 움직인다.
로봇 프로그래밍에서 각 로봇의 관절(또는 회전축이 있는 바퀴)의 위치는 매우 중요한 요소이며, ROS에서는 TF (변형)로 표시된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ros_tf.png&quot; title=&quot;좌표변환&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ROS에서 좌표변환 TF는 장애물과 물체뿐만 아니라 로봇의 구성 요소를 설명 할 때 가장 유용한 개념 중 하나이다.&lt;/p&gt;

&lt;h2 id=&quot;2-좌표-변환-구성&quot;&gt;2. 좌표 변환 구성&lt;/h2&gt;

&lt;p&gt;이들은 자세(pose)라 하여 위치(position)와 방향(orientation)으로 기술할 수 있다. 여기서, 위치는 x, y, z과 같이 3개의 벡터로 설명하고 방향은 사원수라 일컫는 쿼티니언(quaternion) 형태의 x, y, z, w를 이용한다.&lt;/p&gt;

&lt;p&gt;TF는 메시지와 같이 다음과 같은 형태를 취하고 있다.&lt;/p&gt;

&lt;p&gt;변환된 시간을 기록할 목적으로 Header를 사용하며, 하위 좌표를 명시하기 위하여 child_frame_id라는 이름의 메시지를 사용한다. 그리고 상대 좌표 변환값을 알려주기 위하여&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;transform.translation.x&lt;/li&gt;
  &lt;li&gt;transform.translation.y&lt;/li&gt;
  &lt;li&gt;transform.translation.z&lt;/li&gt;
  &lt;li&gt;transform.rotation.x&lt;/li&gt;
  &lt;li&gt;transform.rotation.y&lt;/li&gt;
  &lt;li&gt;transform.rotation.z&lt;/li&gt;
  &lt;li&gt;transform.rotation.w&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Header header
string child_frame_id
Transform transform
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;추후에 좀 더 다양한 프로젝트를 구성해서 다뤄보도록 하자.&lt;/p&gt;

&lt;p&gt;출처:[ROS_Robot_Programming_EN]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="ROS" /><category term="좌표변환" /><category term="TF" /><category term="transform" /><summary type="html">1. 좌표 변환(TF)란?</summary></entry><entry><title type="html">11.ROS 추가적 특징(라이브러리, 이기종 디바이스 통신)</title><link href="http://localhost:4000/categories/ros/ROS-11-additional-feature.html" rel="alternate" type="text/html" title="11.ROS 추가적 특징(라이브러리, 이기종 디바이스 통신)" /><published>2019-12-16T00:00:00+00:00</published><updated>2019-12-16T00:00:00+00:00</updated><id>http://localhost:4000/categories/ros/ROS-11-additional-feature</id><content type="html" xml:base="http://localhost:4000/categories/ros/ROS-11-additional-feature.html">&lt;h2 id=&quot;1-클라이언트-라이브러리&quot;&gt;1. 클라이언트 라이브러리&lt;/h2&gt;

&lt;p&gt;ROS는 다양한 언어들을 활용하여 목적에 맞게 개발할 수 있도록 지원하고 있다.&lt;/p&gt;

&lt;p&gt;노드는 각각의 언어로 작성이 가능하고 노드 간의 메시지 통신을 통해 정보를 교환하는 방법을 이용하고 있다. 이처럼 각각의 언어로 작성 가능하게 해주는 소프트웨어 모듈이 클라이언트 라이브러리(client library)이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C++ - roscpp&lt;/li&gt;
  &lt;li&gt;Python - rospy&lt;/li&gt;
  &lt;li&gt;LISP - roslisp&lt;/li&gt;
  &lt;li&gt;Java - rosjava&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그 외에도 많은 언어에 대한 클라이언트 라이브러리를 지원하고 있다.&lt;/p&gt;

&lt;h2 id=&quot;2-이기종-디바이스-통신&quot;&gt;2. 이기종 디바이스 통신&lt;/h2&gt;

&lt;p&gt;ROS가 설치되어 사용하는 운영체제의 종류와도 상관없고, 사용하는 프로그래밍 언어도 상관없이 ROS가 설치되어 각 노드가 개발되어있다면 각 노드들 간의 통신은 매우 쉽게 이용 가능하다.&lt;/p&gt;

&lt;p&gt;예를 들어 Linux 배포판 인 Ubuntu가 로봇에 설치되어 있어도 MacOS에서 로봇의 상태를 모니터링 할 수 있다. 동시에 사용자는 Android 기반 앱에서 로봇에게 명령을 내릴 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/ros/ros_cross_platform.png&quot; title=&quot;이기종 디바이스 통신&quot; /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;출처:[ROS_Robot_Programming_EN]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="ROS" /><category term="라이브러리" /><category term="이기종디바이스통신" /><summary type="html">1. 클라이언트 라이브러리</summary></entry><entry><title type="html">07.ROS 메시지 더 알아보기</title><link href="http://localhost:4000/categories/ros/ROS-07-message.html" rel="alternate" type="text/html" title="07.ROS 메시지 더 알아보기" /><published>2019-12-13T00:00:00+00:00</published><updated>2019-12-13T00:00:00+00:00</updated><id>http://localhost:4000/categories/ros/ROS-07-message</id><content type="html" xml:base="http://localhost:4000/categories/ros/ROS-07-message.html">&lt;h2 id=&quot;1-메시지란&quot;&gt;1. 메시지란?&lt;/h2&gt;

&lt;p&gt;메시지는 노드 간 데이터 교환에 사용되는 데이터 모음이다. 토픽, 서비스 및 액션에는 메시지를 사용하여 통신한다.&lt;/p&gt;

&lt;p&gt;메시지에는 정수, 부동 소수점, 부울과 같은 기본 데이터 유형과 ‘float32 [] ranges’, ‘Point32 [10] points’와 같은 메시지 배열이 포함될 수 있다.&lt;/p&gt;

&lt;p&gt;이러한 메시지는 아래와 같이 필드 유형 및 필드 이름으로 설명 할 수 있다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;fieldtype1 fieldname1
fieldtype2 fieldname2
fieldtype3 fieldname3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;필드타입에는 아래 표와 같이 ROS 자료형을 기입하게 되고, 필드네임에는 데이터를 의미하는 이름을 적어주게 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;int32 x
int32 y
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ROS Data Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Serialization&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;C++ Data Type&lt;/th&gt;
      &lt;th&gt;Python Data Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;bool&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unsigned 8-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint8_t&lt;/td&gt;
      &lt;td&gt;bool&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;signed 8-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int8_t&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint8&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unsigned 8-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint8_t&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int16&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;signed 16-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int16_t&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint16&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unsigned 16-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint16_t&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int32&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;signed 32-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int32_t&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint32&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unsigned 32-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint32_t&lt;/td&gt;
      &lt;td&gt;int&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;int64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;signed 64-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int64_t&lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;unsigned 64-bit int&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint64_t&lt;/td&gt;
      &lt;td&gt;long&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;float32&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;32-bit IEEE float&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;float&lt;/td&gt;
      &lt;td&gt;float&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;float64&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;64-bit IEEE float&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;double&lt;/td&gt;
      &lt;td&gt;float&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ascii string&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;std::string&lt;/td&gt;
      &lt;td&gt;str&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;time&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;secs/nsecs unsigned 32-bit ints&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ros::time&lt;/td&gt;
      &lt;td&gt;rospy.Time&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;duration&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;secs/nsecs signed 32-bit ints&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ros::Duration&lt;/td&gt;
      &lt;td&gt;rospy.Duration&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;small&gt;[표7-1] ROS의 기본 메시지 자료형&lt;/small&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ROS Data Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Serialization&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;C++ Data Type&lt;/th&gt;
      &lt;th&gt;Python Data Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;fixed-length&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;no extra serialization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;boost::array, std::vector&lt;/td&gt;
      &lt;td&gt;tuple&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;variable-length&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint32 length prefix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;std::vector&lt;/td&gt;
      &lt;td&gt;tuple&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;uint8[]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint32 length prefix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;std::vector&lt;/td&gt;
      &lt;td&gt;bytes&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;bool[]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;uint32 length prefix&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;std::vector&amp;lt;uint8_t&amp;gt;&lt;/td&gt;
      &lt;td&gt;list of bool&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;small&gt;[표7-2] ROS의 메시지 자료형에서 배열처럼 사용하는 방법&lt;small&gt;&lt;/small&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;ROS에서 일반적으로 사용되는 헤더 (std_msgs / Header)도 메시지로 사용할 수 있다. std_msgs의 Header.msg 파일에는 시퀀스 ID, 타임 스탬프 및 프레임 ID가 포함되어 있으며 이를 사용하여 메시지를 조사하거나 시간을 측정한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;std_msgs/Header.msg&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Sequence ID: Messages are sequentially incremented by 1.&lt;/span&gt;
uint32 &lt;span class=&quot;nb&quot;&gt;seq&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Timestamp: Has two child attributes, the stamp.sec for second and the stamp.nsec for nanosecond.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;stamp
&lt;span class=&quot;c&quot;&gt;# Stores the Frame ID&lt;/span&gt;
string frame_id
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다음은 실제로 ROS 프로그램에서 메시지를 사용하는 방법이다.
turtlesim 패키지의 ‘teleop_turtle_key’ 노드의 경우 변환 속도 (미터/초) 및 회전 속도 (라디안/초)가 다음과 같이 turtlesim 노드에 메시지로 전송된다. 키보드에서 입력 한 방향키 (←, →, ↑, ↓)로 TurtleBot는 수신 된 속도 값을 사용하여 화면에서 움직인다. 
현재 사용되는 메시지는‘geometry_msgs’의‘twist’ 메시지이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;Vector3 linear
Vector3 angular
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위의 메시지 구조에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;linear&lt;/code&gt;및 &lt;code class=&quot;highlighter-rouge&quot;&gt;radian&lt;/code&gt;값은 Vector3 유형으로 선언된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;float64 x
float64 y
float64 z
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다시 말해 &lt;code class=&quot;highlighter-rouge&quot;&gt;teleop_turtle_key&lt;/code&gt;노드에서 퍼블리시 된 6개의 토픽은 linear.x, linear.y, linear.z, angular.x, angular.y 및 angular.z 이다. 모두는 ROS에 설명 된 기본 데이터 유형 중 하나 인 float64 유형이다. 이러한 데이터를 사용하여 키보드의 화살표 키를 이동 속도 (미터/초) 및 회전 속도 (라디안/초) 메시지로 변환 할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;2-msg-파일&quot;&gt;2. msg 파일&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;msg&lt;/code&gt; 파일은 주제가 사용하는 메시지 파일이며 파일 확장자는 &lt;code class=&quot;highlighter-rouge&quot;&gt;* .msg&lt;/code&gt;입니다. 위에서 설명한 &lt;code class=&quot;highlighter-rouge&quot;&gt;geometry_msgs&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Twist&lt;/code&gt; 메시지는 메시지의 예다. 이러한 msg 파일은 필드 유형과 필드 이름으로 구성된다.&lt;/p&gt;

&lt;h2 id=&quot;3-srv-파일&quot;&gt;3. srv 파일&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srv&lt;/code&gt;파일은 파일 확장자가 &lt;code class=&quot;highlighter-rouge&quot;&gt;* .srv&lt;/code&gt;인 서비스에서 사용하는 메시지 파일이다.
예를 들어, &lt;code class=&quot;highlighter-rouge&quot;&gt;sensor_msgs&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;SetCameraInfo&lt;/code&gt; 메시지는 일반적인 srv 파일이다. msg 파일과의 주요 차이점은 일련의 세 개의 하이픈 (&lt;strong&gt;---&lt;/strong&gt;)이 구분 기호로 사용된다는 것이다. 상위 메시지는 서비스 요청 메시지이고 하위 메시지는 서비스 응답 메시지이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sensor_msgs/CameraInfo camera_info
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
bool success
string status_message
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;4-action-파일&quot;&gt;4. action 파일&lt;/h2&gt;

&lt;p&gt;액션 메시지 파일은 액션에서 사용하는 메시지 파일이며 파일 확장자는 ‘* .action’이다.
msg 및 srv와 달리 비교적 드문 메시지 파일이므로 메시지 파일의 일반적인 예는 없지만 다음 예와 같이 사용할 수 있다. 
msg 및 srv 파일과의 주요 차이점은 일련의 3 개의 하이픈 (&lt;strong&gt;---&lt;/strong&gt;)이 구분 기호로 두 위치에서 사용된다는 것이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;첫 번째는 목표(goal) 메시지&lt;/li&gt;
  &lt;li&gt;두 번째는 결과(result) 메시지,&lt;/li&gt;
  &lt;li&gt;세 번째는 &lt;strong&gt;피드백(feedback)&lt;/strong&gt; 메시지&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;액션 파일의 가장 큰 차이점은 피드백 메시지 기능이다. 액션 파일의 목표 메시지 및 결과 메시지는 위에서 언급 한 srv 파일의 요청 및 응답 메시지와 비교 될 수 있지만 지정된 프로세스가 수행되는 동안 액션 파일의 추가 피드백 메시지가 피드백을 보내는 데 사용된다.
다음 예에서 설명하는 것처럼 로봇의 시작 위치 ‘start_pose’와 목표 ‘goal_pose’가 요청 값으로 전송되면 로봇은 수신 된 목표 위치로 이동하여 ‘result_pose’를 반환한다. 로봇이 목표 위치로 이동하는 동안 ‘percent_complete’ 메시지는 주기적으로 도달한 목표 지점의 백분율 형식으로 진행률을 나타내는 피드백 값을 전송한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;geometry_msgs/PoseStamped start_pose
geometry_msgs/PoseStamped goal_pose
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
geometry_msgs/PoseStamped result_pose
&lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;
float32 percent_complete
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;출처:[ROS_Robot_Programming_EN]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="ROS" /><category term="메시지" /><summary type="html">1. 메시지란?</summary></entry><entry><title type="html">08.ROS 네임(Name)</title><link href="http://localhost:4000/categories/ros/ROS-08-name.html" rel="alternate" type="text/html" title="08.ROS 네임(Name)" /><published>2019-12-13T00:00:00+00:00</published><updated>2019-12-13T00:00:00+00:00</updated><id>http://localhost:4000/categories/ros/ROS-08-name</id><content type="html" xml:base="http://localhost:4000/categories/ros/ROS-08-name.html">&lt;h2 id=&quot;1-개념&quot;&gt;1. 개념&lt;/h2&gt;

&lt;p&gt;ROS에는 기본 개념으로 &lt;strong&gt;그래프&lt;/strong&gt;라는 추상 데이터 유형이 있다. 이 그래프는 각 노드 간의 연결 관계와 화살표로 보내고받는 메시지 (데이터)의 관계를 보여준다. 이를 위해 ROS의 노드, 토픽 및 서비스에 사용되는 메시지 및 매개 변수는 모두 고유 한 이름을 갖습니다.&lt;/p&gt;

&lt;h2 id=&quot;2-종류&quot;&gt;2. 종류&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌(global)&lt;/li&gt;
  &lt;li&gt;프라이빗(private)&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 		
&lt;span class=&quot;c1&quot;&gt;// Node Main Function&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;node1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; 		 &lt;span class=&quot;c1&quot;&gt;// Node Name Initialization&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeHandle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 			 &lt;span class=&quot;c1&quot;&gt;// Node Handle Declaration&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Publisher Declaration, Topic Name = bar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1_pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advertise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;위 예에서 노드 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/node1&lt;/code&gt;이다. 퍼블리셔가 기호없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;로 선언 된 경우 주제의 상대 이름은 &lt;code class=&quot;highlighter-rouge&quot;&gt;/bar&lt;/code&gt;이다. 슬래시 (&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;) 문자를 사용하여 전역으로 선언하더라도 토픽 이름은 여전히 &lt;code class=&quot;highlighter-rouge&quot;&gt;/bar&lt;/code&gt;이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;글로벌&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1_pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advertise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그러나 프라이빗(&lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt;)으로 선언한 경우 토픽 네임이 &lt;code class=&quot;highlighter-rouge&quot;&gt;/node1/var&lt;/code&gt;가 된다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;프라이빗&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;ros&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node1_pub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;advertise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std_msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;~bar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/wg&lt;/code&gt;는 네임 스페이스가 변경된 것을 의미한다.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Node&lt;/th&gt;
      &lt;th&gt;Relative(Default)&lt;/th&gt;
      &lt;th&gt;Global&lt;/th&gt;
      &lt;th&gt;Private&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;/node1&lt;/td&gt;
      &lt;td&gt;bar → /bar&lt;/td&gt;
      &lt;td&gt;/bar → /bar&lt;/td&gt;
      &lt;td&gt;~bar → /node1/bar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/wg/node2&lt;/td&gt;
      &lt;td&gt;bar → /wg/bar&lt;/td&gt;
      &lt;td&gt;/bar → /bar&lt;/td&gt;
      &lt;td&gt;~bar → /wg/node2/bar&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;/wg/node3&lt;/td&gt;
      &lt;td&gt;foo/bar → /wg/foo/bar&lt;/td&gt;
      &lt;td&gt;/foo/bar → /foo/bar&lt;/td&gt;
      &lt;td&gt;~foo/bar → /wg/node3/foo/bar&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;small&gt;[표8-1]네이밍 규칭&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-네이밍-활용&quot;&gt;3. 네이밍 활용&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;두 대의 카메라를 어떻게 실행할 수 있을까?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;ROS에 고유 한 이름이 있어야하기 때문에 관련 노드를 두 번 실행하면 이전에 실행 된 노드가 종료된다. 그러나 두 대의 카메라를 실행하기 위해 별도의 프로그램을 실행하거나 소스 코드를 변경하지 않아도된다. 네임 스페이스를 사용하거나 리매핑을 활용하여 노드를 실행할 때 간단히 노드 이름을 변경하면된다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;이해를 돕기 위해 가상 &lt;code class=&quot;highlighter-rouge&quot;&gt;camera_package&lt;/code&gt;가 있다고 가정해보자. &lt;code class=&quot;highlighter-rouge&quot;&gt;camera_package&lt;/code&gt;의 &lt;code class=&quot;highlighter-rouge&quot;&gt;camera_node&lt;/code&gt;가 실행될 때 카메라 노드가 실행되었다고 가정하면, 이를 실행하는 방법은 다음과 같을 것이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$rosrun camera_package camera_node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;camera_node&lt;/code&gt;가 image 토픽을 통해 카메라의 이미지 데이터를 전송하면 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;rqt_image_view&lt;/code&gt;를 사용하여이 image 토픽을 수신 할 수 있다(가정).&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$rosrun rqt_image_view rqt_image_view
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;이제 리매핑하여 이러한 노드의 토픽 값을 수정해보자. 다음 명령은 토픽 이름을 &lt;code class=&quot;highlighter-rouge&quot;&gt;/front/image&lt;/code&gt;로 변경한다. 아래 명령에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;camera_node&lt;/code&gt;의 토픽 이름이고 아래 예는 실행 명령에서 옵션을 설정하여 토픽 이름을 변경하는 방법을 보여준다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rosrun camera_package camera_node image:=front/image
$ rosrun rqt_image_view rqt_image_view image:=front/image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예를 들어, front, left 및 right와 같은 세 개의 카메라가있는 경우 여러 노드가 동일한 이름으로 실행될 때 이름이 충돌하여 이전에 실행 된 노드가 종료된다. 따라서, 이름이 같은 노드는 다음과 같은 방식으로 실행할 수 있다. 아래에서 이름 옵션 뒤에 연속 밑줄 (&lt;em&gt;_)이 온다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;__ns&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;__name&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;__log&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;__ip&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;__hostname&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;__master&lt;/code&gt;와 같은 옵션은 노드를 실행할 때 사용되는 특수 옵션이다. 또한, 단일 밑줄 (&lt;/em&gt;)은 프라이빗으로 사용될 경우 토픽 이름 앞에 배치된다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rosrun camera_package camera_node __name:=front _device:=/dev/video0
$ rosrun camera_package camera_node __name:=left _device:=/dev/video1
$ rosrun camera_package camera_node __name:=right _device:=/dev/video2
$ rosrun rqt_image_view rqt_image_view
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;하나의 네임스페이스(namespace)로 묶어주고 싶다면 아래와 같이 할 수 있다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ rosrun camera_package camera_node __ns:=back
$ rosrun rqt_imgae_view rqt_imgae_view __ns:=back
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;출처:[ROS_Robot_Programming_EN]&lt;/p&gt;</content><author><name>Kiho Lee</name></author><category term="ROS" /><category term="네임" /><category term="name" /><summary type="html">1. 개념</summary></entry></feed>