I"<p><br /></p>

<h2 id="1-한정자의-이해">1. 한정자의 이해</h2>

<p>한정자는 보통 1회성 변수로 한번 설정 한 이후 변경되지 않는 변수에 많이 활용하게 된다. 주로 API key 혹은 임베디드 시스템 환경에서 PIN 번호로 활용하기도 한다. 물론 #define을 활용한 매크로도 많이 활용되긴 하지만 말이다.</p>

<p>한정자는 변수(또는 객체) 앞에 선언하여 값을 변경 할 수 없도록 지정하는 문법이다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>const 변수(또는 객체)
</code></pre></div></div>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">getSize</span><span class="p">(){</span>
	<span class="k">return</span> <span class="mi">200</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">bufferSize</span> <span class="o">=</span> <span class="n">getSize</span><span class="p">();</span>
	<span class="n">size</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span><span class="c1">// 컴파일 오류 (변경 불가능)</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span> <span class="c1">// 컴파일 오류 (초기값 필요)</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>size 변수는 const 변수이기 때문에 재정의가 불가하다. 또한, bufferSize 런타임 과정에서 return 값을 반환 받아 정의하게 된다.</p>

<h2 id="2-외부-참조-한정자-extern-키워드">2. 외부 참조 한정자 extern 키워드</h2>

<p>만약 현재 CPP 파일 말고 다른 CPP 파일에서 활용하고 싶다면, <code class="highlighter-rouge">extern</code> 키워드를 활용하여 사용할 수 있다.</p>

<ul>
  <li>extern.h 파일</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="k">extern</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">bufferSize</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
<span class="k">extern</span> <span class="k">const</span> <span class="kt">char</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="n">domain</span> <span class="o">=</span> <span class="s">"www.memaker.co.kr"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>extern const 접근 파일1.cpp</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="cp">#include &lt;iostream&gt;
#include "extern.h"
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bufferSize</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">domain</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>extern const 접근 파일2.cpp</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="cp">#include &lt;iostream&gt;
#include "extern.h"
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bufferSize</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="3-참조자를-한정자로-지정">3. 참조자를 한정자로 지정</h2>

<p>다음과 같이 참조자 역시 한정자로 지정할 수 있다.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

	<span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">size2</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
	<span class="kt">int</span> <span class="o">&amp;</span><span class="n">size3</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// 컴파일 오류 발생</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>한정자를 초기값으로 참조자를 선언할 때는 반드시 해당 참조자 역시 const 키워드를 붙여서 한정자로 선언해야 한다.</p>

<p>[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]</p>
:ET