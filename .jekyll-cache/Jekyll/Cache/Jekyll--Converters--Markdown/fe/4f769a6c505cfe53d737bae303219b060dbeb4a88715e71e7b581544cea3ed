I"{<p><br /></p>

<h2 id="1-포인터">1. 포인터</h2>

<p>C/C++을 통틀어 가장 중요한 개념으로 여겨지는 포인터는 해당 언어를 포기하게 하는 주범이다. 사실 차근차근 따라가면 이해가 되는데, 꼬아 놓으면 진짜 답없는 게 또 이 포인터가 아닌가 싶다.
어쨌든 이 모던 C++에서 다루는 내용은 기본적인 C의 포인터 개념이라기 보단, C++ 11 이상에서 어떻게 활용되는지 그리고 앞으로 스마트 포인터라는 개념도 배우게 될텐데 기본부터 잘 읽혀가는 것이 중요할 것 같다.</p>

<blockquote>
  <p>포인터 : 참조자와 유사하게 주소로 특정 변수나 객체를 잠조할 수 있다. 다시말해, 포인터 변수에는 다른 변수의 주소값을 저장하여, 해당 주소의 데이터를 트랙킹할 수 있다.</p>
</blockquote>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
<span class="kt">int</span> <span class="o">*</span><span class="n">ptrValue</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>size 변수는 const 변수이기 때문에 재정의가 불가하다. 또한, bufferSize 런타임 과정에서 return 값을 반환 받아 정의하게 된다.</p>

<h2 id="2-외부-참조-한정자-extern-키워드">2. 외부 참조 한정자 extern 키워드</h2>

<p>만약 현재 CPP 파일 말고 다른 CPP 파일에서 활용하고 싶다면, <code class="highlighter-rouge">extern</code> 키워드를 활용하여 사용할 수 있다.</p>

<ul>
  <li>extern.h 파일</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="k">extern</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">bufferSize</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>
<span class="k">extern</span> <span class="k">const</span> <span class="kt">char</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span> <span class="n">domain</span> <span class="o">=</span> <span class="s">"www.memaker.co.kr"</span><span class="p">;</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>extern const 접근 파일1.cpp</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="cp">#include &lt;iostream&gt;
#include "extern.h"
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bufferSize</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">domain</span> <span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>extern const 접근 파일2.cpp</li>
</ul>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="cp">#include &lt;iostream&gt;
#include "extern.h"
</span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">bufferSize</span> <span class="o">&lt;&lt;</span> <span class="s">", "</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="3-참조자를-한정자로-지정">3. 참조자를 한정자로 지정</h2>

<p>다음과 같이 참조자 역시 한정자로 지정할 수 있다.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="k">const</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>

	<span class="k">const</span> <span class="kt">int</span> <span class="o">&amp;</span><span class="n">size2</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span>
	<span class="kt">int</span> <span class="o">&amp;</span><span class="n">size3</span> <span class="o">=</span> <span class="n">size</span><span class="p">;</span> <span class="c1">// 컴파일 오류 발생</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>한정자를 초기값으로 참조자를 선언할 때는 반드시 해당 참조자 역시 const 키워드를 붙여서 한정자로 선언해야 한다.</p>

<p>[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]</p>
:ET