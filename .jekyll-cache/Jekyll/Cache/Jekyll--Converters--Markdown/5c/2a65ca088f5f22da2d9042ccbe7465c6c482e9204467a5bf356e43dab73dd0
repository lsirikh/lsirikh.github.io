I"K <p><br /></p>

<h2 id="1-배열의-포인터-변환">1. 배열의 포인터 변환</h2>

<p>배열을 포인터로 변환하여 주소 값 이동을 통해 쉽게 배열의 값을 접근 할 수 있다. 
다음 예제를 통해서 그 기능을 살펴 볼 수 있다.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="cp">#include &lt;iostream&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">;</span> 
	<span class="kt">int</span> <span class="n">arr</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>

	<span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="n">arr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="n">arr</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">arr</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">ptr</span> <span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>이 둘의 결과는 같다는 것을 알 수 있다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2
2
</code></pre></div></div>

<h2 id="2-명시적-형변환">2. 명시적 형변환</h2>

<p>C에서는 타입 캐스트 (type cast)를 통해서 형변환을 하게 된다. C++ 및 모던 C++에서도 같은 기능을 확장 재공하는 것 같다.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cast-name&lt;type&gt;(expression)

* type 변환될 형
* expresssion 변환할 값
* cast-name static_cast, const_static, dynamic_cast, reinterpret_cast
</code></pre></div></div>

<h3 id="21-static_cast-형변환">2.1 static_cast 형변환</h3>

<p>보통 산술연산 작업에서 정밀도가 변경되는 것을 방지하기 위한 강제 형변환하는 경우 활용되는 것 같다.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">float</span> <span class="n">i</span> <span class="o">=</span> <span class="mf">100.12345</span><span class="p">;</span>
	<span class="kt">double</span> <span class="n">j</span> <span class="o">=</span> <span class="mf">200.12345</span><span class="p">;</span>

	<span class="kt">float</span> <span class="n">count</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="n">j</span><span class="o">/</span><span class="n">i</span><span class="p">);</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>위 예제를 통해서 개발자의 실수로 정밀도가 변경되는 것을 방지하기 위해서 <code class="highlighter-rouge">static_cast</code>가 활용되었다는 것을 알 수 있다.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">1212</span><span class="p">;</span>
	<span class="kt">void</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">d</span><span class="p">;</span>
	<span class="kt">double</span> <span class="o">*</span><span class="n">dp</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span> <span class="o">*&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>위의 예는 <code class="highlighter-rouge">void 포인터</code>를 사용한 경우인데, 적절한지 사실 조금의문이 든다. 뭔가 좀 억지로 예를든 느낌이 들긴 하지만, double 형 변수 <code class="highlighter-rouge">d</code>의 주소를 가리키는 <code class="highlighter-rouge">void 포인터 </code>인 <code class="highlighter-rouge">p</code>는 일단 타입이 정해지지 않은 상태이다. 
그 상황에서 <code class="highlighter-rouge">*dp</code>에 대입하려고 한다면, <code class="highlighter-rouge">static_cast&lt;double *&gt;&lt;p&gt;</code>라는 방법으로 명시적 캐스팅이 필요한 상황이 된다는 것을 보여주기 위해 만든 것 같으나 이렇게 하면 <code class="highlighter-rouge">void 포인터</code>의 사용이 무색해질 것 같다는 생각이 든다. 아직 초보인 내가 감히 평가하기는 어렵겠으나 아직까진 그런 느낌적인 느낌이다.</p>

<h3 id="22-const_cast-형변환">2.2 const_cast 형변환</h3>

<p>한정자(const)로 지정한 변수의 한정자 속성을 없애는(?) 기능이라고 볼 수 있을 것 같다. 주의할 점은 한정자 속성만 변경하는 것이지 자료형을 <code class="highlighter-rouge">int</code>에서 <code class="highlighter-rouge">double</code>로 바꾸고 이런 것은 허용되지 않는다.</p>

<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span><span class="p">;</span>
	<span class="kt">char</span> <span class="o">*</span><span class="n">q</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">cp</span><span class="p">);</span>
	<span class="k">static_cast</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cp</span><span class="p">);</span><span class="c1">//오류발생</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>3번째 줄에서 <code class="highlighter-rouge">cp</code> 문자열 변수를 일반 문자열 변수 <code class="highlighter-rouge">q</code>로 형변환 했다. 하지만, 4번째 줄 <code class="highlighter-rouge">const_cast&lt;string&gt;</code>은 자료형을 변환하는 것이기 때문에 오류가 발생한다.</p>

<p>[출처:최신 표준 C++로 쉽고 빠르게 안내하는 모던 C++ 프로그래밍]</p>
:ET